!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(S,t){"use strict";function g(t){return null!=t&&t===t.window}var e=[],o=Object.getPrototypeOf,s=e.slice,m=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},l=e.push,i=e.indexOf,n={},a=n.toString,v=n.hasOwnProperty,r=v.toString,c=r.call(Object),y={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},T=S.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,n){var o,i,a=(n=n||T).createElement("script");if(a.text=t,e)for(o in u)(i=e[o]||e.getAttribute&&e.getAttribute(o))&&a.setAttribute(o,i);n.head.appendChild(a).parentNode.removeChild(a)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?n[a.call(t)]||"object":typeof t}var d="3.5.0",A=function(t,e){return new A.fn.init(t,e)};function f(t){var e=!!t&&"length"in t&&t.length,n=w(t);return!b(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}A.fn=A.prototype={jquery:d,constructor:A,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=A.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return A.each(this,t)},map:function(n){return this.pushStack(A.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(A.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(A.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},A.extend=A.fn.extend=function(){var t,e,n,o,i,a,r=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[s]||{},s++),"object"==typeof r||b(r)||(r={}),s===l&&(r=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)o=t[e],"__proto__"!==e&&r!==o&&(c&&o&&(A.isPlainObject(o)||(i=Array.isArray(o)))?(n=r[e],a=i&&!Array.isArray(n)?[]:i||A.isPlainObject(n)?n:{},i=!1,r[e]=A.extend(c,a,o)):void 0!==o&&(r[e]=o));return r},A.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==a.call(t))&&(!(e=o(t))||"function"==typeof(n=v.call(e,"constructor")&&e.constructor)&&r.call(n)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){x(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,o=0;if(f(t))for(n=t.length;o<n&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(f(Object(t))?A.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:i.call(e,t,n)},merge:function(t,e){for(var n=+e.length,o=0,i=t.length;o<n;o++)t[i++]=e[o];return t.length=i,t},grep:function(t,e,n){for(var o=[],i=0,a=t.length,r=!n;i<a;i++)!e(t[i],i)!=r&&o.push(t[i]);return o},map:function(t,e,n){var o,i,a=0,r=[];if(f(t))for(o=t.length;a<o;a++)null!=(i=e(t[a],a,n))&&r.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&r.push(i);return m(r)},guid:1,support:y}),"function"==typeof Symbol&&(A.fn[Symbol.iterator]=e[Symbol.iterator]),A.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var h=function(n){function d(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function i(){C()}var t,h,x,a,r,p,f,g,w,l,c,C,S,s,T,m,u,v,y,A="sizzle"+ +new Date,b=n.document,E=0,o=0,D=lt(),P=lt(),O=lt(),I=lt(),k=function(t,e){return t===e&&(c=!0),0},N={}.hasOwnProperty,e=[],R=e.pop,F=e.push,M=e.push,j=e.slice,$=function(t,e){for(var n=0,o=t.length;n<o;n++)if(t[n]===e)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+B+"*("+q+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+B+"*\\]",_=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",z=new RegExp(B+"+","g"),W=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g"),U=new RegExp("^"+B+"*,"+B+"*"),X=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),Y=new RegExp(B+"|>"),V=new RegExp(_),G=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,nt=/[+~]/,ot=new RegExp("\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\([^\\r\\n\\f])","g"),it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,at=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=xt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{M.apply(e=j.call(b.childNodes),b.childNodes),e[b.childNodes.length].nodeType}catch(t){M={apply:e.length?function(t,e){F.apply(t,j.call(e))}:function(t,e){for(var n=t.length,o=0;t[n++]=e[o++];);t.length=n-1}}}function st(e,t,n,o){var i,a,r,s,l,c,u,d=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!o&&(C(t),t=t||S,T)){if(11!==f&&(l=et.exec(e)))if(i=l[1]){if(9===f){if(!(r=t.getElementById(i)))return n;if(r.id===i)return n.push(r),n}else if(d&&(r=d.getElementById(i))&&y(t,r)&&r.id===i)return n.push(r),n}else{if(l[2])return M.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&h.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(i)),n}if(h.qsa&&!I[e+" "]&&(!m||!m.test(e))&&(1!==f||"object"!==t.nodeName.toLowerCase())){if(u=e,d=t,1===f&&(Y.test(e)||X.test(e))){for((d=nt.test(e)&&vt(t.parentNode)||t)===t&&h.scope||((s=t.getAttribute("id"))?s=s.replace(it,at):t.setAttribute("id",s=A)),a=(c=p(e)).length;a--;)c[a]=(s?"#"+s:":scope")+" "+bt(c[a]);u=c.join(",")}try{return M.apply(n,d.querySelectorAll(u)),n}catch(t){I(e,!0)}finally{s===A&&t.removeAttribute("id")}}}return g(e.replace(W,"$1"),t,n,o)}function lt(){var n=[];function o(t,e){return n.push(t+" ")>x.cacheLength&&delete o[n.shift()],o[t+" "]=e}return o}function ct(t){return t[A]=!0,t}function ut(t){var e=S.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function dt(t,e){for(var n=t.split("|"),o=n.length;o--;)x.attrHandle[n[o]]=e}function ft(t,e){var n=e&&t,o=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ht(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pt(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function gt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function mt(r){return ct(function(a){return a=+a,ct(function(t,e){for(var n,o=r([],t.length,a),i=o.length;i--;)t[n=o[i]]&&(t[n]=!(e[n]=t[n]))})})}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in h=st.support={},r=st.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!Q.test(e||n&&n.nodeName||"HTML")},C=st.setDocument=function(t){var e,n,o=t?t.ownerDocument||t:b;return o!=S&&9===o.nodeType&&o.documentElement&&(s=(S=o).documentElement,T=!r(S),b!=S&&(n=S.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),h.scope=ut(function(t){return s.appendChild(t).appendChild(S.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),h.attributes=ut(function(t){return t.className="i",!t.getAttribute("className")}),h.getElementsByTagName=ut(function(t){return t.appendChild(S.createComment("")),!t.getElementsByTagName("*").length}),h.getElementsByClassName=tt.test(S.getElementsByClassName),h.getById=ut(function(t){return s.appendChild(t).id=A,!S.getElementsByName||!S.getElementsByName(A).length}),h.getById?(x.filter.ID=function(t){var e=t.replace(ot,d);return function(t){return t.getAttribute("id")===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n=e.getElementById(t);return n?[n]:[]}}):(x.filter.ID=function(t){var n=t.replace(ot,d);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,o,i,a=e.getElementById(t);if(a){if((n=a.getAttributeNode("id"))&&n.value===t)return[a];for(i=e.getElementsByName(t),o=0;a=i[o++];)if((n=a.getAttributeNode("id"))&&n.value===t)return[a]}return[]}}),x.find.TAG=h.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):h.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,o=[],i=0,a=e.getElementsByTagName(t);if("*"!==t)return a;for(;n=a[i++];)1===n.nodeType&&o.push(n);return o},x.find.CLASS=h.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},u=[],m=[],(h.qsa=tt.test(S.querySelectorAll))&&(ut(function(t){var e;s.appendChild(t).innerHTML="<a id='"+A+"'></a><select id='"+A+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+B+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+B+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+A+"-]").length||m.push("~="),(e=S.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\["+B+"*name"+B+"*="+B+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+A+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")}),ut(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=S.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+B+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),s.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(h.matchesSelector=tt.test(v=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ut(function(t){h.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),u.push("!=",_)}),m=m.length&&new RegExp(m.join("|")),u=u.length&&new RegExp(u.join("|")),e=tt.test(s.compareDocumentPosition),y=e||tt.test(s.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,o=e&&e.parentNode;return t===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):t.compareDocumentPosition&&16&t.compareDocumentPosition(o)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},k=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!h.sortDetached&&e.compareDocumentPosition(t)===n?t==S||t.ownerDocument==b&&y(b,t)?-1:e==S||e.ownerDocument==b&&y(b,e)?1:l?$(l,t)-$(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,o=0,i=t.parentNode,a=e.parentNode,r=[t],s=[e];if(!i||!a)return t==S?-1:e==S?1:i?-1:a?1:l?$(l,t)-$(l,e):0;if(i===a)return ft(t,e);for(n=t;n=n.parentNode;)r.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;r[o]===s[o];)o++;return o?ft(r[o],s[o]):r[o]==b?-1:s[o]==b?1:0}),S},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if(C(t),h.matchesSelector&&T&&!I[e+" "]&&(!u||!u.test(e))&&(!m||!m.test(e)))try{var n=v.call(t,e);if(n||h.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){I(e,!0)}return 0<st(e,S,null,[t]).length},st.contains=function(t,e){return(t.ownerDocument||t)!=S&&C(t),y(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!=S&&C(t);var n=x.attrHandle[e.toLowerCase()],o=n&&N.call(x.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==o?o:h.attributes||!T?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},st.escape=function(t){return(t+"").replace(it,at)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,n=[],o=0,i=0;if(c=!h.detectDuplicates,l=!h.sortStable&&t.slice(0),t.sort(k),c){for(;e=t[i++];)e===t[i]&&(o=n.push(i));for(;o--;)t.splice(n[o],1)}return l=null,t},a=st.getText=function(t){var e,n="",o=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=a(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[o++];)n+=a(e);return n},(x=st.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(ot,d),t[3]=(t[3]||t[4]||t[5]||"").replace(ot,d),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=p(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(ot,d).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=D[t+" "];return e||(e=new RegExp("(^|"+B+")"+t+"("+B+"|$)"))&&D(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,o,i){return function(t){var e=st.attr(t,n);return null==e?"!="===o:!o||(e+="","="===o?e===i:"!="===o?e!==i:"^="===o?i&&0===e.indexOf(i):"*="===o?i&&-1<e.indexOf(i):"$="===o?i&&e.slice(-i.length)===i:"~="===o?-1<(" "+e.replace(z," ")+" ").indexOf(i):"|="===o&&(e===i||e.slice(0,i.length+1)===i+"-"))}},CHILD:function(p,t,e,g,m){var v="nth"!==p.slice(0,3),y="last"!==p.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var o,i,a,r,s,l,c=v!=y?"nextSibling":"previousSibling",u=t.parentNode,d=b&&t.nodeName.toLowerCase(),f=!n&&!b,h=!1;if(u){if(v){for(;c;){for(r=t;r=r[c];)if(b?r.nodeName.toLowerCase()===d:1===r.nodeType)return!1;l=c="only"===p&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&f){for(h=(s=(o=(i=(a=(r=u)[A]||(r[A]={}))[r.uniqueID]||(a[r.uniqueID]={}))[p]||[])[0]===E&&o[1])&&o[2],r=s&&u.childNodes[s];r=++s&&r&&r[c]||(h=s=0)||l.pop();)if(1===r.nodeType&&++h&&r===t){i[p]=[E,s,h];break}}else if(f&&(h=s=(o=(i=(a=(r=t)[A]||(r[A]={}))[r.uniqueID]||(a[r.uniqueID]={}))[p]||[])[0]===E&&o[1]),!1===h)for(;(r=++s&&r&&r[c]||(h=s=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==d:1!==r.nodeType)||!++h||(f&&((i=(a=r[A]||(r[A]={}))[r.uniqueID]||(a[r.uniqueID]={}))[p]=[E,h]),r!==t)););return(h-=m)===g||h%g==0&&0<=h/g}}},PSEUDO:function(t,a){var e,r=x.pseudos[t]||x.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return r[A]?r(a):1<r.length?(e=[t,t,"",a],x.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var n,o=r(t,a),i=o.length;i--;)t[n=$(t,o[i])]=!(e[n]=o[i])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var o=[],i=[],s=f(t.replace(W,"$1"));return s[A]?ct(function(t,e,n,o){for(var i,a=s(t,null,o,[]),r=t.length;r--;)(i=a[r])&&(t[r]=!(e[r]=i))}):function(t,e,n){return o[0]=t,s(o,null,n,i),o[0]=null,!i.pop()}}),has:ct(function(e){return function(t){return 0<st(e,t).length}}),contains:ct(function(e){return e=e.replace(ot,d),function(t){return-1<(t.textContent||a(t)).indexOf(e)}}),lang:ct(function(n){return G.test(n||"")||st.error("unsupported lang: "+n),n=n.replace(ot,d).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===s},focus:function(t){return t===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt(function(){return[0]}),last:mt(function(t,e){return[e-1]}),eq:mt(function(t,e,n){return[n<0?n+e:n]}),even:mt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:mt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:mt(function(t,e,n){for(var o=n<0?n+e:e<n?e:n;0<=--o;)t.push(o);return t}),gt:mt(function(t,e,n){for(var o=n<0?n+e:n;++o<e;)t.push(o);return t})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[t]=ht(t);for(t in{submit:!0,reset:!0})x.pseudos[t]=pt(t);function yt(){}function bt(t){for(var e=0,n=t.length,o="";e<n;e++)o+=t[e].value;return o}function xt(s,t,e){var l=t.dir,c=t.next,u=c||l,d=e&&"parentNode"===u,f=o++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||d)return s(t,e,n);return!1}:function(t,e,n){var o,i,a,r=[E,f];if(n){for(;t=t[l];)if((1===t.nodeType||d)&&s(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||d)if(i=(a=t[A]||(t[A]={}))[t.uniqueID]||(a[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((o=i[u])&&o[0]===E&&o[1]===f)return r[2]=o[2];if((i[u]=r)[2]=s(t,e,n))return!0}return!1}}function wt(i){return 1<i.length?function(t,e,n){for(var o=i.length;o--;)if(!i[o](t,e,n))return!1;return!0}:i[0]}function Ct(t,e,n,o,i){for(var a,r=[],s=0,l=t.length,c=null!=e;s<l;s++)(a=t[s])&&(n&&!n(a,o,i)||(r.push(a),c&&e.push(s)));return r}function St(h,p,g,m,v,t){return m&&!m[A]&&(m=St(m)),v&&!v[A]&&(v=St(v,t)),ct(function(t,e,n,o){var i,a,r,s=[],l=[],c=e.length,u=t||function(t,e,n){for(var o=0,i=e.length;o<i;o++)st(t,e[o],n);return n}(p||"*",n.nodeType?[n]:n,[]),d=!h||!t&&p?u:Ct(u,s,h,n,o),f=g?v||(t?h:c||m)?[]:e:d;if(g&&g(d,f,n,o),m)for(i=Ct(f,l),m(i,[],n,o),a=i.length;a--;)(r=i[a])&&(f[l[a]]=!(d[l[a]]=r));if(t){if(v||h){if(v){for(i=[],a=f.length;a--;)(r=f[a])&&i.push(d[a]=r);v(null,f=[],i,o)}for(a=f.length;a--;)(r=f[a])&&-1<(i=v?$(t,r):s[a])&&(t[i]=!(e[i]=r))}}else f=Ct(f===e?f.splice(c,f.length):f),v?v(null,e,f,o):M.apply(e,f)})}function Tt(t){for(var i,e,n,o=t.length,a=x.relative[t[0].type],r=a||x.relative[" "],s=a?1:0,l=xt(function(t){return t===i},r,!0),c=xt(function(t){return-1<$(i,t)},r,!0),u=[function(t,e,n){var o=!a&&(n||e!==w)||((i=e).nodeType?l:c)(t,e,n);return i=null,o}];s<o;s++)if(e=x.relative[t[s].type])u=[xt(wt(u),e)];else{if((e=x.filter[t[s].type].apply(null,t[s].matches))[A]){for(n=++s;n<o&&!x.relative[t[n].type];n++);return St(1<s&&wt(u),1<s&&bt(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(W,"$1"),e,s<n&&Tt(t.slice(s,n)),n<o&&Tt(t=t.slice(n)),n<o&&bt(t))}u.push(e)}return wt(u)}function At(m,v){function t(t,e,n,o,i){var a,r,s,l=0,c="0",u=t&&[],d=[],f=w,h=t||b&&x.find.TAG("*",i),p=E+=null==f?1:Math.random()||.1,g=h.length;for(i&&(w=e==S||e||i);c!==g&&null!=(a=h[c]);c++){if(b&&a){for(r=0,e||a.ownerDocument==S||(C(a),n=!T);s=m[r++];)if(s(a,e||S,n)){o.push(a);break}i&&(E=p)}y&&((a=!s&&a)&&l--,t&&u.push(a))}if(l+=c,y&&c!==l){for(r=0;s=v[r++];)s(u,d,e,n);if(t){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=R.call(o));d=Ct(d)}M.apply(o,d),i&&!t&&0<d.length&&1<l+v.length&&st.uniqueSort(o)}return i&&(E=p,w=f),u}var y=0<v.length,b=0<m.length;return y?ct(t):t}return yt.prototype=x.filters=x.pseudos,x.setFilters=new yt,p=st.tokenize=function(t,e){var n,o,i,a,r,s,l,c=P[t+" "];if(c)return e?0:c.slice(0);for(r=t,s=[],l=x.preFilter;r;){for(a in n&&!(o=U.exec(r))||(o&&(r=r.slice(o[0].length)||r),s.push(i=[])),n=!1,(o=X.exec(r))&&(n=o.shift(),i.push({value:n,type:o[0].replace(W," ")}),r=r.slice(n.length)),x.filter)!(o=K[a].exec(r))||l[a]&&!(o=l[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),r=r.slice(n.length));if(!n)break}return e?r.length:r?st.error(t):P(t,s).slice(0)},f=st.compile=function(t,e){var n,o=[],i=[],a=O[t+" "];if(!a){for(n=(e=e||p(t)).length;n--;)(a=Tt(e[n]))[A]?o.push(a):i.push(a);(a=O(t,At(i,o))).selector=t}return a},g=st.select=function(t,e,n,o){var i,a,r,s,l,c="function"==typeof t&&t,u=!o&&p(t=c.selector||t);if(n=n||[],1===u.length){if(2<(a=u[0]=u[0].slice(0)).length&&"ID"===(r=a[0]).type&&9===e.nodeType&&T&&x.relative[a[1].type]){if(!(e=(x.find.ID(r.matches[0].replace(ot,d),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(i=K.needsContext.test(t)?0:a.length;i--&&(r=a[i],!x.relative[s=r.type]);)if((l=x.find[s])&&(o=l(r.matches[0].replace(ot,d),nt.test(a[0].type)&&vt(e.parentNode)||e))){if(a.splice(i,1),!(t=o.length&&bt(a)))return M.apply(n,o),n;break}}return(c||f(t,u))(o,e,!T,n,!e||nt.test(t)&&vt(e.parentNode)||e),n},h.sortStable=A.split("").sort(k).join("")===A,h.detectDuplicates=!!c,C(),h.sortDetached=ut(function(t){return 1&t.compareDocumentPosition(S.createElement("fieldset"))}),ut(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||dt("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),h.attributes&&ut(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||dt("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ut(function(t){return null==t.getAttribute("disabled")})||dt(L,function(t,e,n){var o;if(!n)return!0===t[e]?e.toLowerCase():(o=t.getAttributeNode(e))&&o.specified?o.value:null}),st}(S);A.find=h,A.expr=h.selectors,A.expr[":"]=A.expr.pseudos,A.uniqueSort=A.unique=h.uniqueSort,A.text=h.getText,A.isXMLDoc=h.isXML,A.contains=h.contains,A.escapeSelector=h.escape;function p(t,e,n){for(var o=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&A(t).is(n))break;o.push(t)}return o}function C(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}var E=A.expr.match.needsContext;function D(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,n,o){return b(n)?A.grep(t,function(t,e){return!!n.call(t,e,t)!==o}):n.nodeType?A.grep(t,function(t){return t===n!==o}):"string"!=typeof n?A.grep(t,function(t){return-1<i.call(n,t)!==o}):A.filter(n,t,o)}A.filter=function(t,e,n){var o=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===o.nodeType?A.find.matchesSelector(o,t)?[o]:[]:A.find.matches(t,A.grep(e,function(t){return 1===t.nodeType}))},A.fn.extend({find:function(t){var e,n,o=this.length,i=this;if("string"!=typeof t)return this.pushStack(A(t).filter(function(){for(e=0;e<o;e++)if(A.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<o;e++)A.find(t,i[e],n);return 1<o?A.uniqueSort(n):n},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&E.test(t)?A(t):t||[],!1).length}});var I,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(A.fn.init=function(t,e,n){var o,i;if(!t)return this;if(n=n||I,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==n.ready?n.ready(t):t(A):A.makeArray(t,this);if(!(o="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:k.exec(t))||!o[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof A?e[0]:e,A.merge(this,A.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),P.test(o[1])&&A.isPlainObject(e))for(o in e)b(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(i=T.getElementById(o[2]))&&(this[0]=i,this.length=1),this}).prototype=A.fn,I=A(T);var N=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function F(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}A.fn.extend({has:function(t){var e=A(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(A.contains(this,e[t]))return!0})},closest:function(t,e){var n,o=0,i=this.length,a=[],r="string"!=typeof t&&A(t);if(!E.test(t))for(;o<i;o++)for(n=this[o];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?-1<r.index(n):1===n.nodeType&&A.find.matchesSelector(n,t))){a.push(n);break}return this.pushStack(1<a.length?A.uniqueSort(a):a)},index:function(t){return t?"string"==typeof t?i.call(A(t),this[0]):i.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(A.uniqueSort(A.merge(this.get(),A(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),A.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return p(t,"parentNode")},parentsUntil:function(t,e,n){return p(t,"parentNode",n)},next:function(t){return F(t,"nextSibling")},prev:function(t){return F(t,"previousSibling")},nextAll:function(t){return p(t,"nextSibling")},prevAll:function(t){return p(t,"previousSibling")},nextUntil:function(t,e,n){return p(t,"nextSibling",n)},prevUntil:function(t,e,n){return p(t,"previousSibling",n)},siblings:function(t){return C((t.parentNode||{}).firstChild,t)},children:function(t){return C(t.firstChild)},contents:function(t){return null!=t.contentDocument&&o(t.contentDocument)?t.contentDocument:(D(t,"template")&&(t=t.content||t),A.merge([],t.childNodes))}},function(o,i){A.fn[o]=function(t,e){var n=A.map(this,i,t);return"Until"!==o.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=A.filter(e,n)),1<this.length&&(R[o]||A.uniqueSort(n),N.test(o)&&n.reverse()),this.pushStack(n)}});var M=/[^\x20\t\r\n\f]+/g;function j(t){return t}function $(t){throw t}function L(t,e,n,o){var i;try{t&&b(i=t.promise)?i.call(t).done(e).fail(n):t&&b(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(o))}catch(t){n.apply(void 0,[t])}}A.Callbacks=function(o){var t,n;o="string"==typeof o?(t=o,n={},A.each(t.match(M)||[],function(t,e){n[e]=!0}),n):A.extend({},o);function i(){for(s=s||o.once,r=a=!0;c.length;u=-1)for(e=c.shift();++u<l.length;)!1===l[u].apply(e[0],e[1])&&o.stopOnFalse&&(u=l.length,e=!1);o.memory||(e=!1),a=!1,s&&(l=e?[]:"")}var a,e,r,s,l=[],c=[],u=-1,d={add:function(){return l&&(e&&!a&&(u=l.length-1,c.push(e)),function n(t){A.each(t,function(t,e){b(e)?o.unique&&d.has(e)||l.push(e):e&&e.length&&"string"!==w(e)&&n(e)})}(arguments),e&&!a&&i()),this},remove:function(){return A.each(arguments,function(t,e){for(var n;-1<(n=A.inArray(e,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(t){return t?-1<A.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return s=c=[],e||a||(l=e=""),this},locked:function(){return!!s},fireWith:function(t,e){return s||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),a||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},A.extend({Deferred:function(t){var a=[["notify","progress",A.Callbacks("memory"),A.Callbacks("memory"),2],["resolve","done",A.Callbacks("once memory"),A.Callbacks("once memory"),0,"resolved"],["reject","fail",A.Callbacks("once memory"),A.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var i=arguments;return A.Deferred(function(o){A.each(a,function(t,e){var n=b(i[e[4]])&&i[e[4]];s[e[1]](function(){var t=n&&n.apply(this,arguments);t&&b(t.promise)?t.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[e[0]+"With"](this,n?[t]:arguments)})}),i=null}).promise()},then:function(e,n,o){var l=0;function c(i,a,r,s){return function(){function t(){var t,e;if(!(i<l)){if((t=r.apply(n,o))===a.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,b(e)?s?e.call(t,c(l,a,j,s),c(l,a,$,s)):(l++,e.call(t,c(l,a,j,s),c(l,a,$,s),c(l,a,j,a.notifyWith))):(r!==j&&(n=void 0,o=[t]),(s||a.resolveWith)(n,o))}}var n=this,o=arguments,e=s?t:function(){try{t()}catch(t){A.Deferred.exceptionHook&&A.Deferred.exceptionHook(t,e.stackTrace),l<=i+1&&(r!==$&&(n=void 0,o=[t]),a.rejectWith(n,o))}};i?e():(A.Deferred.getStackHook&&(e.stackTrace=A.Deferred.getStackHook()),S.setTimeout(e))}}return A.Deferred(function(t){a[0][3].add(c(0,t,b(o)?o:j,t.notifyWith)),a[1][3].add(c(0,t,b(e)?e:j)),a[2][3].add(c(0,t,b(n)?n:$))}).promise()},promise:function(t){return null!=t?A.extend(t,r):r}},s={};return A.each(a,function(t,e){var n=e[2],o=e[5];r[e[1]]=n.add,o&&n.add(function(){i=o},a[3-t][2].disable,a[3-t][3].disable,a[0][2].lock,a[0][3].lock),n.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=n.fireWith}),r.promise(s),t&&t.call(s,s),s},when:function(t){function e(e){return function(t){i[e]=this,a[e]=1<arguments.length?s.call(arguments):t,--n||r.resolveWith(i,a)}}var n=arguments.length,o=n,i=Array(o),a=s.call(arguments),r=A.Deferred();if(n<=1&&(L(t,r.done(e(o)).resolve,r.reject,!n),"pending"===r.state()||b(a[o]&&a[o].then)))return r.then();for(;o--;)L(a[o],e(o),r.reject);return r.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;A.Deferred.exceptionHook=function(t,e){S.console&&S.console.warn&&t&&B.test(t.name)&&S.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},A.readyException=function(t){S.setTimeout(function(){throw t})};var q=A.Deferred();function H(){T.removeEventListener("DOMContentLoaded",H),S.removeEventListener("load",H),A.ready()}A.fn.ready=function(t){return q.then(t).catch(function(t){A.readyException(t)}),this},A.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--A.readyWait:A.isReady)||(A.isReady=!0)!==t&&0<--A.readyWait||q.resolveWith(T,[A])}}),A.ready.then=q.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?S.setTimeout(A.ready):(T.addEventListener("DOMContentLoaded",H),S.addEventListener("load",H));var _=function(t,e,n,o,i,a,r){var s=0,l=t.length,c=null==n;if("object"===w(n))for(s in i=!0,n)_(t,e,s,n[s],!0,a,r);else if(void 0!==o&&(i=!0,b(o)||(r=!0),c&&(e=r?(e.call(t,o),null):(c=e,function(t,e,n){return c.call(A(t),n)})),e))for(;s<l;s++)e(t[s],n,r?o:o.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):l?e(t[0],n):a},z=/^-ms-/,W=/-([a-z])/g;function U(t,e){return e.toUpperCase()}function X(t){return t.replace(z,"ms-").replace(W,U)}function Y(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function V(){this.expando=A.expando+V.uid++}V.uid=1,V.prototype={cache:function(t){var e=t[this.expando];return e||(e=Object.create(null),Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var o,i=this.cache(t);if("string"==typeof e)i[X(e)]=n;else for(o in e)i[X(o)]=e[o];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,o=t[this.expando];if(void 0!==o){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in o?[e]:e.match(M)||[]).length;for(;n--;)delete o[e[n]]}void 0!==e&&!A.isEmptyObject(o)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!A.isEmptyObject(e)}};var G=new V,K=new V,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(t,e,n){var o,i;if(void 0===n&&1===t.nodeType)if(o="data-"+e.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(o))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:Q.test(i)?JSON.parse(i):i)}catch(t){}K.set(t,e,n)}else n=void 0;return n}A.extend({hasData:function(t){return K.hasData(t)||G.hasData(t)},data:function(t,e,n){return K.access(t,e,n)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,n){return G.access(t,e,n)},_removeData:function(t,e){G.remove(t,e)}}),A.fn.extend({data:function(n,t){var e,o,i,a=this[0],r=a&&a.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){K.set(this,n)}):_(this,function(t){var e;if(a&&void 0===t)return void 0!==(e=K.get(a,n))||void 0!==(e=J(a,n))?e:void 0;this.each(function(){K.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(i=K.get(a),1===a.nodeType&&!G.get(a,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(o=r[e].name).indexOf("data-")&&(o=X(o.slice(5)),J(a,o,i[o]));G.set(a,"hasDataAttrs",!0)}return i},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),A.extend({queue:function(t,e,n){var o;if(t)return e=(e||"fx")+"queue",o=G.get(t,e),n&&(!o||Array.isArray(n)?o=G.access(t,e,A.makeArray(n)):o.push(n)),o||[]},dequeue:function(t,e){e=e||"fx";var n=A.queue(t,e),o=n.length,i=n.shift(),a=A._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),o--),i&&("fx"===e&&n.unshift("inprogress"),delete a.stop,i.call(t,function(){A.dequeue(t,e)},a)),!o&&a&&a.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return G.get(t,n)||G.access(t,n,{empty:A.Callbacks("once memory").add(function(){G.remove(t,[e+"queue",n])})})}}),A.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?A.queue(this[0],e):void 0===n?this:this.each(function(){var t=A.queue(this,e,n);A._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&A.dequeue(this,e)})},dequeue:function(t){return this.each(function(){A.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function n(){--i||a.resolveWith(r,[r])}var o,i=1,a=A.Deferred(),r=this,s=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(o=G.get(r[s],t+"queueHooks"))&&o.empty&&(i++,o.empty.add(n));return n(),a.promise(e)}});var tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,et=new RegExp("^(?:([+-])=|)("+tt+")([a-z%]*)$","i"),nt=["Top","Right","Bottom","Left"],ot=T.documentElement,it=function(t){return A.contains(t.ownerDocument,t)},at={composed:!0};ot.getRootNode&&(it=function(t){return A.contains(t.ownerDocument,t)||t.getRootNode(at)===t.ownerDocument});var rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&it(t)&&"none"===A.css(t,"display")};function st(t,e,n,o){var i,a,r=20,s=o?function(){return o.cur()}:function(){return A.css(t,e,"")},l=s(),c=n&&n[3]||(A.cssNumber[e]?"":"px"),u=t.nodeType&&(A.cssNumber[e]||"px"!==c&&+l)&&et.exec(A.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)A.style(t,e,u+c),(1-a)*(1-(a=s()/l||.5))<=0&&(r=0),u/=a;u*=2,A.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],o&&(o.unit=c,o.start=u,o.end=i)),i}var lt={};function ct(t,e){for(var n,o,i,a,r,s,l,c=[],u=0,d=t.length;u<d;u++)(o=t[u]).style&&(n=o.style.display,e?("none"===n&&(c[u]=G.get(o,"display")||null,c[u]||(o.style.display="")),""===o.style.display&&rt(o)&&(c[u]=(l=r=a=void 0,r=(i=o).ownerDocument,s=i.nodeName,(l=lt[s])||(a=r.body.appendChild(r.createElement(s)),l=A.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),lt[s]=l)))):"none"!==n&&(c[u]="none",G.set(o,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(t[u].style.display=c[u]);return t}A.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?A(this).show():A(this).hide()})}});var ut,dt,ft=/^(?:checkbox|radio)$/i,ht=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pt=/^$|^module$|\/(?:java|ecma)script/i;ut=T.createDocumentFragment().appendChild(T.createElement("div")),(dt=T.createElement("input")).setAttribute("type","radio"),dt.setAttribute("checked","checked"),dt.setAttribute("name","t"),ut.appendChild(dt),y.checkClone=ut.cloneNode(!0).cloneNode(!0).lastChild.checked,ut.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ut.cloneNode(!0).lastChild.defaultValue,ut.innerHTML="<option></option>",y.option=!!ut.lastChild;var gt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&D(t,e)?A.merge([t],n):n}function vt(t,e){for(var n=0,o=t.length;n<o;n++)G.set(t[n],"globalEval",!e||G.get(e[n],"globalEval"))}gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td,y.option||(gt.optgroup=gt.option=[1,"<select multiple='multiple'>","</select>"]);var yt=/<|&#?\w+;/;function bt(t,e,n,o,i){for(var a,r,s,l,c,u,d=e.createDocumentFragment(),f=[],h=0,p=t.length;h<p;h++)if((a=t[h])||0===a)if("object"===w(a))A.merge(f,a.nodeType?[a]:a);else if(yt.test(a)){for(r=r||d.appendChild(e.createElement("div")),s=(ht.exec(a)||["",""])[1].toLowerCase(),l=gt[s]||gt._default,r.innerHTML=l[1]+A.htmlPrefilter(a)+l[2],u=l[0];u--;)r=r.lastChild;A.merge(f,r.childNodes),(r=d.firstChild).textContent=""}else f.push(e.createTextNode(a));for(d.textContent="",h=0;a=f[h++];)if(o&&-1<A.inArray(a,o))i&&i.push(a);else if(c=it(a),r=mt(d.appendChild(a),"script"),c&&vt(r),n)for(u=0;a=r[u++];)pt.test(a.type||"")&&n.push(a);return d}var xt=/^key/,wt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ct=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function Tt(){return!1}function At(t,e){return t===function(){try{return T.activeElement}catch(t){}}()==("focus"===e)}function Et(t,e,n,o,i,a){var r,s;if("object"==typeof e){for(s in"string"!=typeof n&&(o=o||n,n=void 0),e)Et(t,s,n,o,e[s],a);return t}if(null==o&&null==i?(i=n,o=n=void 0):null==i&&("string"==typeof n?(i=o,o=void 0):(i=o,o=n,n=void 0)),!1===i)i=Tt;else if(!i)return t;return 1===a&&(r=i,(i=function(t){return A().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=A.guid++)),t.each(function(){A.event.add(this,e,i,o,n)})}function Dt(t,i,a){a?(G.set(t,i,!1),A.event.add(t,i,{namespace:!1,handler:function(t){var e,n,o=G.get(this,i);if(1&t.isTrigger&&this[i]){if(o.length)(A.event.special[i]||{}).delegateType&&t.stopPropagation();else if(o=s.call(arguments),G.set(this,i,o),e=a(this,i),this[i](),o!==(n=G.get(this,i))||e?G.set(this,i,!1):n={},o!==n)return t.stopImmediatePropagation(),t.preventDefault(),n.value}else o.length&&(G.set(this,i,{value:A.event.trigger(A.extend(o[0],A.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===G.get(t,i)&&A.event.add(t,i,St)}A.event={global:{},add:function(e,t,n,o,i){var a,r,s,l,c,u,d,f,h,p,g,m=G.get(e);if(Y(e))for(n.handler&&(n=(a=n).handler,i=a.selector),i&&A.find.matchesSelector(ot,i),n.guid||(n.guid=A.guid++),(l=m.events)||(l=m.events=Object.create(null)),(r=m.handle)||(r=m.handle=function(t){return void 0!==A&&A.event.triggered!==t.type?A.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(M)||[""]).length;c--;)h=g=(s=Ct.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),h&&(d=A.event.special[h]||{},h=(i?d.delegateType:d.bindType)||h,d=A.event.special[h]||{},u=A.extend({type:h,origType:g,data:o,handler:n,guid:n.guid,selector:i,needsContext:i&&A.expr.match.needsContext.test(i),namespace:p.join(".")},a),(f=l[h])||((f=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,o,p,r)||e.addEventListener&&e.addEventListener(h,r)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,u):f.push(u),A.event.global[h]=!0)},remove:function(t,e,n,o,i){var a,r,s,l,c,u,d,f,h,p,g,m=G.hasData(t)&&G.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(M)||[""]).length;c--;)if(h=g=(s=Ct.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),h){for(d=A.event.special[h]||{},f=l[h=(o?d.delegateType:d.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=a=f.length;a--;)u=f[a],!i&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||o&&o!==u.selector&&("**"!==o||!u.selector)||(f.splice(a,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(t,u));r&&!f.length&&(d.teardown&&!1!==d.teardown.call(t,p,m.handle)||A.removeEvent(t,h,m.handle),delete l[h])}else for(h in l)A.event.remove(t,h+e[c],n,o,!0);A.isEmptyObject(l)&&G.remove(t,"handle events")}},dispatch:function(t){var e,n,o,i,a,r,s=new Array(arguments.length),l=A.event.fix(t),c=(G.get(this,"events")||Object.create(null))[l.type]||[],u=A.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(r=A.event.handlers.call(this,l,c),e=0;(i=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(a=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(o=((A.event.special[a.origType]||{}).handle||a.handler).apply(i.elem,s))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,o,i,a,r,s=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(a=[],r={},n=0;n<l;n++)void 0===r[i=(o=e[n]).selector+" "]&&(r[i]=o.needsContext?-1<A(i,this).index(c):A.find(i,this,null,[c]).length),r[i]&&a.push(o);a.length&&s.push({elem:c,handlers:a})}return c=this,l<e.length&&s.push({elem:c,handlers:e.slice(l)}),s},addProp:function(e,t){Object.defineProperty(A.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[A.expando]?t:new A.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ft.test(e.type)&&e.click&&D(e,"input")&&Dt(e,"click",St),!1},trigger:function(t){var e=this||t;return ft.test(e.type)&&e.click&&D(e,"input")&&Dt(e,"click"),!0},_default:function(t){var e=t.target;return ft.test(e.type)&&e.click&&D(e,"input")&&G.get(e,"click")||D(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},A.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},A.Event=function(t,e){if(!(this instanceof A.Event))return new A.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&A.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[A.expando]=!0},A.Event.prototype={constructor:A.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},A.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&wt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},A.event.addProp),A.each({focus:"focusin",blur:"focusout"},function(t,e){A.event.special[t]={setup:function(){return Dt(this,t,At),!1},trigger:function(){return Dt(this,t),!0},delegateType:e}}),A.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,i){A.event.special[t]={delegateType:i,bindType:i,handle:function(t){var e,n=t.relatedTarget,o=t.handleObj;return n&&(n===this||A.contains(this,n))||(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=i),e}}}),A.fn.extend({on:function(t,e,n,o){return Et(this,t,e,n,o)},one:function(t,e,n,o){return Et(this,t,e,n,o,1)},off:function(t,e,n){var o,i;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,A(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Tt),this.each(function(){A.event.remove(this,t,n,e)});for(i in t)this.off(i,e,t[i]);return this}});var Pt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,It=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function kt(t,e){return D(t,"table")&&D(11!==e.nodeType?e:e.firstChild,"tr")&&A(t).children("tbody")[0]||t}function Nt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Rt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,o,i,a,r,s;if(1===e.nodeType){if(G.hasData(t)&&(s=G.get(t).events))for(i in G.remove(e,"handle events"),s)for(n=0,o=s[i].length;n<o;n++)A.event.add(e,i,s[i][n]);K.hasData(t)&&(a=K.access(t),r=A.extend({},a),K.set(e,r))}}function Mt(n,o,i,a){o=m(o);var t,e,r,s,l,c,u=0,d=n.length,f=d-1,h=o[0],p=b(h);if(p||1<d&&"string"==typeof h&&!y.checkClone&&Ot.test(h))return n.each(function(t){var e=n.eq(t);p&&(o[0]=h.call(this,t,e.html())),Mt(e,o,i,a)});if(d&&(e=(t=bt(o,n[0].ownerDocument,!1,n,a)).firstChild,1===t.childNodes.length&&(t=e),e||a)){for(s=(r=A.map(mt(t,"script"),Nt)).length;u<d;u++)l=t,u!==f&&(l=A.clone(l,!0,!0),s&&A.merge(r,mt(l,"script"))),i.call(n[u],l,u);if(s)for(c=r[r.length-1].ownerDocument,A.map(r,Rt),u=0;u<s;u++)l=r[u],pt.test(l.type||"")&&!G.access(l,"globalEval")&&A.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?A._evalUrl&&!l.noModule&&A._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):x(l.textContent.replace(It,""),l,c))}return n}function jt(t,e,n){for(var o,i=e?A.filter(e,t):t,a=0;null!=(o=i[a]);a++)n||1!==o.nodeType||A.cleanData(mt(o)),o.parentNode&&(n&&it(o)&&vt(mt(o,"script")),o.parentNode.removeChild(o));return t}A.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var o,i,a,r,s,l,c,u=t.cloneNode(!0),d=it(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||A.isXMLDoc(t)))for(r=mt(u),o=0,i=(a=mt(t)).length;o<i;o++)s=a[o],l=r[o],"input"===(c=l.nodeName.toLowerCase())&&ft.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(e)if(n)for(a=a||mt(t),r=r||mt(u),o=0,i=a.length;o<i;o++)Ft(a[o],r[o]);else Ft(t,u);return 0<(r=mt(u,"script")).length&&vt(r,!d&&mt(t,"script")),u},cleanData:function(t){for(var e,n,o,i=A.event.special,a=0;void 0!==(n=t[a]);a++)if(Y(n)){if(e=n[G.expando]){if(e.events)for(o in e.events)i[o]?A.event.remove(n,o):A.removeEvent(n,o,e.handle);n[G.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),A.fn.extend({detach:function(t){return jt(this,t,!0)},remove:function(t){return jt(this,t)},text:function(t){return _(this,function(t){return void 0===t?A.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Mt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||kt(this,t).appendChild(t)})},prepend:function(){return Mt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=kt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Mt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Mt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(A.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return A.clone(this,t,e)})},html:function(t){return _(this,function(t){var e=this[0]||{},n=0,o=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!gt[(ht.exec(t)||["",""])[1].toLowerCase()]){t=A.htmlPrefilter(t);try{for(;n<o;n++)1===(e=this[n]||{}).nodeType&&(A.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return Mt(this,arguments,function(t){var e=this.parentNode;A.inArray(this,n)<0&&(A.cleanData(mt(this)),e&&e.replaceChild(t,this))},n)}}),A.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){A.fn[t]=function(t){for(var e,n=[],o=A(t),i=o.length-1,a=0;a<=i;a++)e=a===i?this:this.clone(!0),A(o[a])[r](e),l.apply(n,e.get());return this.pushStack(n)}});function $t(t,e,n){var o,i,a={};for(i in e)a[i]=t.style[i],t.style[i]=e[i];for(i in o=n.call(t),e)t.style[i]=a[i];return o}var Lt,Bt,qt,Ht,_t,zt,Wt,Ut,Xt=new RegExp("^("+tt+")(?!px)[a-z%]+$","i"),Yt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=S),e.getComputedStyle(t)},Vt=new RegExp(nt.join("|"),"i");function Gt(){if(Ut){Wt.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ut.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ot.appendChild(Wt).appendChild(Ut);var t=S.getComputedStyle(Ut);Lt="1%"!==t.top,zt=12===Kt(t.marginLeft),Ut.style.right="60%",Ht=36===Kt(t.right),Bt=36===Kt(t.width),Ut.style.position="absolute",qt=12===Kt(Ut.offsetWidth/3),ot.removeChild(Wt),Ut=null}}function Kt(t){return Math.round(parseFloat(t))}function Qt(t,e,n){var o,i,a,r,s=t.style;return(n=n||Yt(t))&&(""!==(r=n.getPropertyValue(e)||n[e])||it(t)||(r=A.style(t,e)),!y.pixelBoxStyles()&&Xt.test(r)&&Vt.test(e)&&(o=s.width,i=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=r,r=n.width,s.width=o,s.minWidth=i,s.maxWidth=a)),void 0!==r?r+"":r}function Zt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Wt=T.createElement("div"),(Ut=T.createElement("div")).style&&(Ut.style.backgroundClip="content-box",Ut.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ut.style.backgroundClip,A.extend(y,{boxSizingReliable:function(){return Gt(),Bt},pixelBoxStyles:function(){return Gt(),Ht},pixelPosition:function(){return Gt(),Lt},reliableMarginLeft:function(){return Gt(),zt},scrollboxSize:function(){return Gt(),qt},reliableTrDimensions:function(){var t,e,n,o;return null==_t&&(t=T.createElement("table"),e=T.createElement("tr"),n=T.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",n.style.height="9px",ot.appendChild(t).appendChild(e).appendChild(n),o=S.getComputedStyle(e),_t=3<parseInt(o.height),ot.removeChild(t)),_t}}));var Jt=["Webkit","Moz","ms"],te=T.createElement("div").style,ee={};function ne(t){var e=A.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Jt.length;n--;)if((t=Jt[n]+e)in te)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,ie=/^--/,ae={position:"absolute",visibility:"hidden",display:"block"},re={letterSpacing:"0",fontWeight:"400"};function se(t,e,n){var o=et.exec(e);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):e}function le(t,e,n,o,i,a){var r="width"===e?1:0,s=0,l=0;if(n===(o?"border":"content"))return 0;for(;r<4;r+=2)"margin"===n&&(l+=A.css(t,n+nt[r],!0,i)),o?("content"===n&&(l-=A.css(t,"padding"+nt[r],!0,i)),"margin"!==n&&(l-=A.css(t,"border"+nt[r]+"Width",!0,i))):(l+=A.css(t,"padding"+nt[r],!0,i),"padding"!==n?l+=A.css(t,"border"+nt[r]+"Width",!0,i):s+=A.css(t,"border"+nt[r]+"Width",!0,i));return!o&&0<=a&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-a-l-s-.5))||0),l}function ce(t,e,n){var o=Yt(t),i=(!y.boxSizingReliable()||n)&&"border-box"===A.css(t,"boxSizing",!1,o),a=i,r=Qt(t,e,o),s="offset"+e[0].toUpperCase()+e.slice(1);if(Xt.test(r)){if(!n)return r;r="auto"}return(!y.boxSizingReliable()&&i||!y.reliableTrDimensions()&&D(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===A.css(t,"display",!1,o))&&t.getClientRects().length&&(i="border-box"===A.css(t,"boxSizing",!1,o),(a=s in t)&&(r=t[s])),(r=parseFloat(r)||0)+le(t,e,n||(i?"border":"content"),a,o,r)+"px"}function ue(t,e,n,o,i){return new ue.prototype.init(t,e,n,o,i)}A.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,o){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,a,r,s=X(e),l=ie.test(e),c=t.style;if(l||(e=ne(s)),r=A.cssHooks[e]||A.cssHooks[s],void 0===n)return r&&"get"in r&&void 0!==(i=r.get(t,!1,o))?i:c[e];"string"===(a=typeof n)&&(i=et.exec(n))&&i[1]&&(n=st(t,e,i),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=i&&i[3]||(A.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(n=r.set(t,n,o))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,o){var i,a,r,s=X(e);return ie.test(e)||(e=ne(s)),(r=A.cssHooks[e]||A.cssHooks[s])&&"get"in r&&(i=r.get(t,!0,n)),void 0===i&&(i=Qt(t,e,o)),"normal"===i&&e in re&&(i=re[e]),""===n||n?(a=parseFloat(i),!0===n||isFinite(a)?a||0:i):i}}),A.each(["height","width"],function(t,l){A.cssHooks[l]={get:function(t,e,n){if(e)return!oe.test(A.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ce(t,l,n):$t(t,ae,function(){return ce(t,l,n)})},set:function(t,e,n){var o,i=Yt(t),a=!y.scrollboxSize()&&"absolute"===i.position,r=(a||n)&&"border-box"===A.css(t,"boxSizing",!1,i),s=n?le(t,l,n,r,i):0;return r&&a&&(s-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(i[l])-le(t,l,"border",!1,i)-.5)),s&&(o=et.exec(e))&&"px"!==(o[3]||"px")&&(t.style[l]=e,e=A.css(t,l)),se(0,e,s)}}}),A.cssHooks.marginLeft=Zt(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-$t(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),A.each({margin:"",padding:"",border:"Width"},function(i,a){A.cssHooks[i+a]={expand:function(t){for(var e=0,n={},o="string"==typeof t?t.split(" "):[t];e<4;e++)n[i+nt[e]+a]=o[e]||o[e-2]||o[0];return n}},"margin"!==i&&(A.cssHooks[i+a].set=se)}),A.fn.extend({css:function(t,e){return _(this,function(t,e,n){var o,i,a={},r=0;if(Array.isArray(e)){for(o=Yt(t),i=e.length;r<i;r++)a[e[r]]=A.css(t,e[r],!1,o);return a}return void 0!==n?A.style(t,e,n):A.css(t,e)},t,e,1<arguments.length)}}),(A.Tween=ue).prototype={constructor:ue,init:function(t,e,n,o,i,a){this.elem=t,this.prop=n,this.easing=i||A.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=o,this.unit=a||(A.cssNumber[n]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,n=ue.propHooks[this.prop];return this.options.duration?this.pos=e=A.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=A.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){A.fx.step[t.prop]?A.fx.step[t.prop](t):1!==t.elem.nodeType||!A.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:A.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},A.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},A.fx=ue.prototype.init,A.fx.step={};var de,fe,he,pe,ge=/^(?:toggle|show|hide)$/,me=/queueHooks$/;function ve(){fe&&(!1===T.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(ve):S.setTimeout(ve,A.fx.interval),A.fx.tick())}function ye(){return S.setTimeout(function(){de=void 0}),de=Date.now()}function be(t,e){var n,o=0,i={height:t};for(e=e?1:0;o<4;o+=2-e)i["margin"+(n=nt[o])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function xe(t,e,n){for(var o,i=(we.tweeners[e]||[]).concat(we.tweeners["*"]),a=0,r=i.length;a<r;a++)if(o=i[a].call(n,e,t))return o}function we(a,t,e){var n,r,o=0,i=we.prefilters.length,s=A.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=de||ye(),e=Math.max(0,c.startTime+c.duration-t),n=1-(e/c.duration||0),o=0,i=c.tweens.length;o<i;o++)c.tweens[o].run(n);return s.notifyWith(a,[c,n,e]),n<1&&i?e:(i||s.notifyWith(a,[c,1,0]),s.resolveWith(a,[c]),!1)},c=s.promise({elem:a,props:A.extend({},t),opts:A.extend(!0,{specialEasing:{},easing:A.easing._default},e),originalProperties:t,originalOptions:e,startTime:de||ye(),duration:e.duration,tweens:[],createTween:function(t,e){var n=A.Tween(a,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var e=0,n=t?c.tweens.length:0;if(r)return this;for(r=!0;e<n;e++)c.tweens[e].run(1);return t?(s.notifyWith(a,[c,1,0]),s.resolveWith(a,[c,t])):s.rejectWith(a,[c,t]),this}}),u=c.props;for(!function(t,e){var n,o,i,a,r;for(n in t)if(i=e[o=X(n)],a=t[n],Array.isArray(a)&&(i=a[1],a=t[n]=a[0]),n!==o&&(t[o]=a,delete t[n]),(r=A.cssHooks[o])&&"expand"in r)for(n in a=r.expand(a),delete t[o],a)n in t||(t[n]=a[n],e[n]=i);else e[o]=i}(u,c.opts.specialEasing);o<i;o++)if(n=we.prefilters[o].call(c,a,u,c.opts))return b(n.stop)&&(A._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return A.map(u,xe,c),b(c.opts.start)&&c.opts.start.call(a,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),A.fx.timer(A.extend(l,{elem:a,anim:c,queue:c.opts.queue})),c}A.Animation=A.extend(we,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return st(n.elem,t,et.exec(e),n),n}]},tweener:function(t,e){for(var n,o=0,i=(t=b(t)?(e=t,["*"]):t.match(M)).length;o<i;o++)n=t[o],we.tweeners[n]=we.tweeners[n]||[],we.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var o,i,a,r,s,l,c,u,d="width"in e||"height"in e,f=this,h={},p=t.style,g=t.nodeType&&rt(t),m=G.get(t,"fxshow");for(o in n.queue||(null==(r=A._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,s=r.empty.fire,r.empty.fire=function(){r.unqueued||s()}),r.unqueued++,f.always(function(){f.always(function(){r.unqueued--,A.queue(t,"fx").length||r.empty.fire()})})),e)if(i=e[o],ge.test(i)){if(delete e[o],a=a||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[o])continue;g=!0}h[o]=m&&m[o]||A.style(t,o)}if((l=!A.isEmptyObject(e))||!A.isEmptyObject(h))for(o in d&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=G.get(t,"display")),"none"===(u=A.css(t,"display"))&&(c?u=c:(ct([t],!0),c=t.style.display||c,u=A.css(t,"display"),ct([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===A.css(t,"float")&&(l||(f.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,h)l||(m?"hidden"in m&&(g=m.hidden):m=G.access(t,"fxshow",{display:c}),a&&(m.hidden=!g),g&&ct([t],!0),f.done(function(){for(o in g||ct([t]),G.remove(t,"fxshow"),h)A.style(t,o,h[o])})),l=xe(g?m[o]:0,o,f),o in m||(m[o]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?we.prefilters.unshift(t):we.prefilters.push(t)}}),A.speed=function(t,e,n){var o=t&&"object"==typeof t?A.extend({},t):{complete:n||!n&&e||b(t)&&t,duration:t,easing:n&&e||e&&!b(e)&&e};return A.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in A.fx.speeds?o.duration=A.fx.speeds[o.duration]:o.duration=A.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){b(o.old)&&o.old.call(this),o.queue&&A.dequeue(this,o.queue)},o},A.fn.extend({fadeTo:function(t,e,n,o){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,o)},animate:function(e,t,n,o){function i(){var t=we(this,A.extend({},e),r);(a||G.get(this,"finish"))&&t.stop(!0)}var a=A.isEmptyObject(e),r=A.speed(t,n,o);return i.finish=i,a||!1===r.queue?this.each(i):this.queue(r.queue,i)},stop:function(i,t,a){function r(t){var e=t.stop;delete t.stop,e(a)}return"string"!=typeof i&&(a=t,t=i,i=void 0),t&&this.queue(i||"fx",[]),this.each(function(){var t=!0,e=null!=i&&i+"queueHooks",n=A.timers,o=G.get(this);if(e)o[e]&&o[e].stop&&r(o[e]);else for(e in o)o[e]&&o[e].stop&&me.test(e)&&r(o[e]);for(e=n.length;e--;)n[e].elem!==this||null!=i&&n[e].queue!==i||(n[e].anim.stop(a),t=!1,n.splice(e,1));!t&&a||A.dequeue(this,i)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=G.get(this),n=e[r+"queue"],o=e[r+"queueHooks"],i=A.timers,a=n?n.length:0;for(e.finish=!0,A.queue(this,r,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===r&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),A.each(["toggle","show","hide"],function(t,o){var i=A.fn[o];A.fn[o]=function(t,e,n){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(be(o,!0),t,e,n)}}),A.each({slideDown:be("show"),slideUp:be("hide"),slideToggle:be("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,o){A.fn[t]=function(t,e,n){return this.animate(o,t,e,n)}}),A.timers=[],A.fx.tick=function(){var t,e=0,n=A.timers;for(de=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||A.fx.stop(),de=void 0},A.fx.timer=function(t){A.timers.push(t),A.fx.start()},A.fx.interval=13,A.fx.start=function(){fe||(fe=!0,ve())},A.fx.stop=function(){fe=null},A.fx.speeds={slow:600,fast:200,_default:400},A.fn.delay=function(o,t){return o=A.fx&&A.fx.speeds[o]||o,t=t||"fx",this.queue(t,function(t,e){var n=S.setTimeout(t,o);e.stop=function(){S.clearTimeout(n)}})},he=T.createElement("input"),pe=T.createElement("select").appendChild(T.createElement("option")),he.type="checkbox",y.checkOn=""!==he.value,y.optSelected=pe.selected,(he=T.createElement("input")).value="t",he.type="radio",y.radioValue="t"===he.value;var Ce,Se=A.expr.attrHandle;A.fn.extend({attr:function(t,e){return _(this,A.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){A.removeAttr(this,t)})}}),A.extend({attr:function(t,e,n){var o,i,a=t.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===t.getAttribute?A.prop(t,e,n):(1===a&&A.isXMLDoc(t)||(i=A.attrHooks[e.toLowerCase()]||(A.expr.match.bool.test(e)?Ce:void 0)),void 0!==n?null===n?void A.removeAttr(t,e):i&&"set"in i&&void 0!==(o=i.set(t,n,e))?o:(t.setAttribute(e,n+""),n):!(i&&"get"in i&&null!==(o=i.get(t,e)))&&null==(o=A.find.attr(t,e))?void 0:o)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&D(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,o=0,i=e&&e.match(M);if(i&&1===t.nodeType)for(;n=i[o++];)t.removeAttribute(n)}}),Ce={set:function(t,e,n){return!1===e?A.removeAttr(t,n):t.setAttribute(n,n),n}},A.each(A.expr.match.bool.source.match(/\w+/g),function(t,e){var r=Se[e]||A.find.attr;Se[e]=function(t,e,n){var o,i,a=e.toLowerCase();return n||(i=Se[a],Se[a]=o,o=null!=r(t,e,n)?a:null,Se[a]=i),o}});var Te=/^(?:input|select|textarea|button)$/i,Ae=/^(?:a|area)$/i;function Ee(t){return(t.match(M)||[]).join(" ")}function De(t){return t.getAttribute&&t.getAttribute("class")||""}function Pe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(M)||[]}A.fn.extend({prop:function(t,e){return _(this,A.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[A.propFix[t]||t]})}}),A.extend({prop:function(t,e,n){var o,i,a=t.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&A.isXMLDoc(t)||(e=A.propFix[e]||e,i=A.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(o=i.set(t,n,e))?o:t[e]=n:i&&"get"in i&&null!==(o=i.get(t,e))?o:t[e]},propHooks:{tabIndex:{get:function(t){var e=A.find.attr(t,"tabindex");return e?parseInt(e,10):Te.test(t.nodeName)||Ae.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(A.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),A.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){A.propFix[this.toLowerCase()]=this}),A.fn.extend({addClass:function(e){var t,n,o,i,a,r,s,l=0;if(b(e))return this.each(function(t){A(this).addClass(e.call(this,t,De(this)))});if((t=Pe(e)).length)for(;n=this[l++];)if(i=De(n),o=1===n.nodeType&&" "+Ee(i)+" "){for(r=0;a=t[r++];)o.indexOf(" "+a+" ")<0&&(o+=a+" ");i!==(s=Ee(o))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,o,i,a,r,s,l=0;if(b(e))return this.each(function(t){A(this).removeClass(e.call(this,t,De(this)))});if(!arguments.length)return this.attr("class","");if((t=Pe(e)).length)for(;n=this[l++];)if(i=De(n),o=1===n.nodeType&&" "+Ee(i)+" "){for(r=0;a=t[r++];)for(;-1<o.indexOf(" "+a+" ");)o=o.replace(" "+a+" "," ");i!==(s=Ee(o))&&n.setAttribute("class",s)}return this},toggleClass:function(i,e){var a=typeof i,r="string"==a||Array.isArray(i);return"boolean"==typeof e&&r?e?this.addClass(i):this.removeClass(i):b(i)?this.each(function(t){A(this).toggleClass(i.call(this,t,De(this),e),e)}):this.each(function(){var t,e,n,o;if(r)for(e=0,n=A(this),o=Pe(i);t=o[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==i&&"boolean"!=a||((t=De(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",!t&&!1!==i&&G.get(this,"__className__")||""))})},hasClass:function(t){var e,n,o=0;for(e=" "+t+" ";n=this[o++];)if(1===n.nodeType&&-1<(" "+Ee(De(n))+" ").indexOf(e))return!0;return!1}});var Oe=/\r/g;A.fn.extend({val:function(n){var o,t,i,e=this[0];return arguments.length?(i=b(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=i?n.call(this,t,A(this).val()):n)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=A.map(e,function(t){return null==t?"":t+""})),(o=A.valHooks[this.type]||A.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&void 0!==o.set(this,e,"value")||(this.value=e))})):e?(o=A.valHooks[e.type]||A.valHooks[e.nodeName.toLowerCase()])&&"get"in o&&void 0!==(t=o.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(Oe,""):null==t?"":t:void 0}}),A.extend({valHooks:{option:{get:function(t){var e=A.find.attr(t,"value");return null!=e?e:Ee(A.text(t))}},select:{get:function(t){var e,n,o,i=t.options,a=t.selectedIndex,r="select-one"===t.type,s=r?null:[],l=r?a+1:i.length;for(o=a<0?l:r?a:0;o<l;o++)if(((n=i[o]).selected||o===a)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(e=A(n).val(),r)return e;s.push(e)}return s},set:function(t,e){for(var n,o,i=t.options,a=A.makeArray(e),r=i.length;r--;)((o=i[r]).selected=-1<A.inArray(A.valHooks.option.get(o),a))&&(n=!0);return n||(t.selectedIndex=-1),a}}}}),A.each(["radio","checkbox"],function(){A.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<A.inArray(A(t).val(),e)}},y.checkOn||(A.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in S;function Ie(t){t.stopPropagation()}var ke=/^(?:focusinfocus|focusoutblur)$/;A.extend(A.event,{trigger:function(t,e,n,o){var i,a,r,s,l,c,u,d,f=[n||T],h=v.call(t,"type")?t.type:t,p=v.call(t,"namespace")?t.namespace.split("."):[];if(a=d=r=n=n||T,3!==n.nodeType&&8!==n.nodeType&&!ke.test(h+A.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),l=h.indexOf(":")<0&&"on"+h,(t=t[A.expando]?t:new A.Event(h,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:A.makeArray(e,[t]),u=A.event.special[h]||{},o||!u.trigger||!1!==u.trigger.apply(n,e))){if(!o&&!u.noBubble&&!g(n)){for(s=u.delegateType||h,ke.test(s+h)||(a=a.parentNode);a;a=a.parentNode)f.push(a),r=a;r===(n.ownerDocument||T)&&f.push(r.defaultView||r.parentWindow||S)}for(i=0;(a=f[i++])&&!t.isPropagationStopped();)d=a,t.type=1<i?s:u.bindType||h,(c=(G.get(a,"events")||Object.create(null))[t.type]&&G.get(a,"handle"))&&c.apply(a,e),(c=l&&a[l])&&c.apply&&Y(a)&&(t.result=c.apply(a,e),!1===t.result&&t.preventDefault());return t.type=h,o||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(f.pop(),e)||!Y(n)||l&&b(n[h])&&!g(n)&&((r=n[l])&&(n[l]=null),A.event.triggered=h,t.isPropagationStopped()&&d.addEventListener(h,Ie),n[h](),t.isPropagationStopped()&&d.removeEventListener(h,Ie),A.event.triggered=void 0,r&&(n[l]=r)),t.result}},simulate:function(t,e,n){var o=A.extend(new A.Event,n,{type:t,isSimulated:!0});A.event.trigger(o,null,e)}}),A.fn.extend({trigger:function(t,e){return this.each(function(){A.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return A.event.trigger(t,e,n,!0)}}),y.focusin||A.each({focus:"focusin",blur:"focusout"},function(n,o){function i(t){A.event.simulate(o,t.target,A.event.fix(t))}A.event.special[o]={setup:function(){var t=this.ownerDocument||this.document||this,e=G.access(t,o);e||t.addEventListener(n,i,!0),G.access(t,o,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=G.access(t,o)-1;e?G.access(t,o,e):(t.removeEventListener(n,i,!0),G.remove(t,o))}}});var Ne=S.location,Re={guid:Date.now()},Fe=/\?/;A.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new S.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||A.error("Invalid XML: "+t),e};var Me=/\[\]$/,je=/\r?\n/g,$e=/^(?:submit|button|image|reset|file)$/i,Le=/^(?:input|select|textarea|keygen)/i;function Be(n,t,o,i){var e;if(Array.isArray(t))A.each(t,function(t,e){o||Me.test(n)?i(n,e):Be(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,o,i)});else if(o||"object"!==w(t))i(n,t);else for(e in t)Be(n+"["+e+"]",t[e],o,i)}A.param=function(t,e){function n(t,e){var n=b(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)}var o,i=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!A.isPlainObject(t))A.each(t,function(){n(this.name,this.value)});else for(o in t)Be(o,t[o],e,n);return i.join("&")},A.fn.extend({serialize:function(){return A.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=A.prop(this,"elements");return t?A.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!A(this).is(":disabled")&&Le.test(this.nodeName)&&!$e.test(t)&&(this.checked||!ft.test(t))}).map(function(t,e){var n=A(this).val();return null==n?null:Array.isArray(n)?A.map(n,function(t){return{name:e.name,value:t.replace(je,"\r\n")}}):{name:e.name,value:n.replace(je,"\r\n")}}).get()}});var qe=/%20/g,He=/#.*$/,_e=/([?&])_=[^&]*/,ze=/^(.*?):[ \t]*([^\r\n]*)$/gm,We=/^(?:GET|HEAD)$/,Ue=/^\/\//,Xe={},Ye={},Ve="*/".concat("*"),Ge=T.createElement("a");function Ke(a){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,o=0,i=t.toLowerCase().match(M)||[];if(b(e))for(;n=i[o++];)"+"===n[0]?(n=n.slice(1)||"*",(a[n]=a[n]||[]).unshift(e)):(a[n]=a[n]||[]).push(e)}}function Qe(e,i,a,r){var s={},l=e===Ye;function c(t){var o;return s[t]=!0,A.each(e[t]||[],function(t,e){var n=e(i,a,r);return"string"!=typeof n||l||s[n]?l?!(o=n):void 0:(i.dataTypes.unshift(n),c(n),!1)}),o}return c(i.dataTypes[0])||!s["*"]&&c("*")}function Ze(t,e){var n,o,i=A.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:o=o||{})[n]=e[n]);return o&&A.extend(!0,t,o),t}Ge.href=Ne.href,A.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ne.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ne.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ve,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":A.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ze(Ze(t,A.ajaxSettings),e):Ze(A.ajaxSettings,t)},ajaxPrefilter:Ke(Xe),ajaxTransport:Ke(Ye),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var u,d,f,n,h,o,p,g,i,a,m=A.ajaxSetup({},e),v=m.context||m,y=m.context&&(v.nodeType||v.jquery)?A(v):A.event,b=A.Deferred(),x=A.Callbacks("once memory"),w=m.statusCode||{},r={},s={},l="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(p){if(!n)for(n={};e=ze.exec(f);)n[e[1].toLowerCase()+" "]=(n[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=n[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return p?f:null},setRequestHeader:function(t,e){return null==p&&(t=s[t.toLowerCase()]=s[t.toLowerCase()]||t,r[t]=e),this},overrideMimeType:function(t){return null==p&&(m.mimeType=t),this},statusCode:function(t){var e;if(t)if(p)C.always(t[C.status]);else for(e in t)w[e]=[w[e],t[e]];return this},abort:function(t){var e=t||l;return u&&u.abort(e),c(0,e),this}};if(b.promise(C),m.url=((t||m.url||Ne.href)+"").replace(Ue,Ne.protocol+"//"),m.type=e.method||e.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(M)||[""],null==m.crossDomain){o=T.createElement("a");try{o.href=m.url,o.href=o.href,m.crossDomain=Ge.protocol+"//"+Ge.host!=o.protocol+"//"+o.host}catch(t){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=A.param(m.data,m.traditional)),Qe(Xe,m,e,C),p)return C;for(i in(g=A.event&&m.global)&&0==A.active++&&A.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!We.test(m.type),d=m.url.replace(He,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(qe,"+")):(a=m.url.slice(d.length),m.data&&(m.processData||"string"==typeof m.data)&&(d+=(Fe.test(d)?"&":"?")+m.data,delete m.data),!1===m.cache&&(d=d.replace(_e,"$1"),a=(Fe.test(d)?"&":"?")+"_="+Re.guid+++a),m.url=d+a),m.ifModified&&(A.lastModified[d]&&C.setRequestHeader("If-Modified-Since",A.lastModified[d]),A.etag[d]&&C.setRequestHeader("If-None-Match",A.etag[d])),(m.data&&m.hasContent&&!1!==m.contentType||e.contentType)&&C.setRequestHeader("Content-Type",m.contentType),C.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Ve+"; q=0.01":""):m.accepts["*"]),m.headers)C.setRequestHeader(i,m.headers[i]);if(m.beforeSend&&(!1===m.beforeSend.call(v,C,m)||p))return C.abort();if(l="abort",x.add(m.complete),C.done(m.success),C.fail(m.error),u=Qe(Ye,m,e,C)){if(C.readyState=1,g&&y.trigger("ajaxSend",[C,m]),p)return C;m.async&&0<m.timeout&&(h=S.setTimeout(function(){C.abort("timeout")},m.timeout));try{p=!1,u.send(r,c)}catch(t){if(p)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,n,o){var i,a,r,s,l,c=e;p||(p=!0,h&&S.clearTimeout(h),u=void 0,f=o||"",C.readyState=0<t?4:0,i=200<=t&&t<300||304===t,n&&(s=function(t,e,n){for(var o,i,a,r,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(i in s)if(s[i]&&s[i].test(o)){l.unshift(i);break}if(l[0]in n)a=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){a=i;break}r=r||i}a=a||r}if(a)return a!==l[0]&&l.unshift(a),n[a]}(m,C,n)),!i&&-1<A.inArray("script",m.dataTypes)&&(m.converters["text script"]=function(){}),s=function(t,e,n,o){var i,a,r,s,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(a=u.shift();a;)if(t.responseFields[a]&&(n[t.responseFields[a]]=e),!l&&o&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=a,a=u.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(r=c[l+" "+a]||c["* "+a]))for(i in c)if((s=i.split(" "))[1]===a&&(r=c[l+" "+s[0]]||c["* "+s[0]])){!0===r?r=c[i]:!0!==c[i]&&(a=s[0],u.unshift(s[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+a}}}return{state:"success",data:e}}(m,s,C,i),i?(m.ifModified&&((l=C.getResponseHeader("Last-Modified"))&&(A.lastModified[d]=l),(l=C.getResponseHeader("etag"))&&(A.etag[d]=l)),204===t||"HEAD"===m.type?c="nocontent":304===t?c="notmodified":(c=s.state,a=s.data,i=!(r=s.error))):(r=c,!t&&c||(c="error",t<0&&(t=0))),C.status=t,C.statusText=(e||c)+"",i?b.resolveWith(v,[a,c,C]):b.rejectWith(v,[C,c,r]),C.statusCode(w),w=void 0,g&&y.trigger(i?"ajaxSuccess":"ajaxError",[C,m,i?a:r]),x.fireWith(v,[C,c]),g&&(y.trigger("ajaxComplete",[C,m]),--A.active||A.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,n){return A.get(t,e,n,"json")},getScript:function(t,e){return A.get(t,void 0,e,"script")}}),A.each(["get","post"],function(t,i){A[i]=function(t,e,n,o){return b(e)&&(o=o||n,n=e,e=void 0),A.ajax(A.extend({url:t,type:i,dataType:o,data:e,success:n},A.isPlainObject(t)&&t))}}),A.ajaxPrefilter(function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),A._evalUrl=function(t,e,n){return A.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){A.globalEval(t,e,n)}})},A.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=A(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(t){A(this).wrapInner(n.call(this,t))}):this.each(function(){var t=A(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=b(e);return this.each(function(t){A(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){A(this).replaceWith(this.childNodes)}),this}}),A.expr.pseudos.hidden=function(t){return!A.expr.pseudos.visible(t)},A.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},A.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},tn=A.ajaxSettings.xhr();y.cors=!!tn&&"withCredentials"in tn,y.ajax=tn=!!tn,A.ajaxTransport(function(i){var a,r;if(y.cors||tn&&!i.crossDomain)return{send:function(t,e){var n,o=i.xhr();if(o.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)o[n]=i.xhrFields[n];for(n in i.mimeType&&o.overrideMimeType&&o.overrideMimeType(i.mimeType),i.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)o.setRequestHeader(n,t[n]);a=function(t){return function(){a&&(a=r=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===t?o.abort():"error"===t?"number"!=typeof o.status?e(0,"error"):e(o.status,o.statusText):e(Je[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=a(),r=o.onerror=o.ontimeout=a("error"),void 0!==o.onabort?o.onabort=r:o.onreadystatechange=function(){4===o.readyState&&S.setTimeout(function(){a&&r()})},a=a("abort");try{o.send(i.hasContent&&i.data||null)}catch(t){if(a)throw t}},abort:function(){a&&a()}}}),A.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),A.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return A.globalEval(t),t}}}),A.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),A.ajaxTransport("script",function(n){var o,i;if(n.crossDomain||n.scriptAttrs)return{send:function(t,e){o=A("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(t){o.remove(),i=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(o[0])},abort:function(){i&&i()}}});var en,nn=[],on=/(=)\?(?=&|$)|\?\?/;A.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=nn.pop()||A.expando+"_"+Re.guid++;return this[t]=!0,t}}),A.ajaxPrefilter("json jsonp",function(t,e,n){var o,i,a,r=!1!==t.jsonp&&(on.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&on.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(on,"$1"+o):!1!==t.jsonp&&(t.url+=(Fe.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||A.error(o+" was not called"),a[0]},t.dataTypes[0]="json",i=S[o],S[o]=function(){a=arguments},n.always(function(){void 0===i?A(S).removeProp(o):S[o]=i,t[o]&&(t.jsonpCallback=e.jsonpCallback,nn.push(o)),a&&b(i)&&i(a[0]),a=i=void 0}),"script"}),y.createHTMLDocument=((en=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),A.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(y.createHTMLDocument?((o=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(o)):e=T),a=!n&&[],(i=P.exec(t))?[e.createElement(i[1])]:(i=bt([t],e,a),a&&a.length&&A(a).remove(),A.merge([],i.childNodes)));var o,i,a},A.fn.load=function(t,e,n){var o,i,a,r=this,s=t.indexOf(" ");return-1<s&&(o=Ee(t.slice(s)),t=t.slice(0,s)),b(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),0<r.length&&A.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){a=arguments,r.html(o?A("<div>").append(A.parseHTML(t)).find(o):t)}).always(n&&function(t,e){r.each(function(){n.apply(this,a||[t.responseText,e,t])})}),this},A.expr.pseudos.animated=function(e){return A.grep(A.timers,function(t){return e===t.elem}).length},A.offset={setOffset:function(t,e,n){var o,i,a,r,s,l,c=A.css(t,"position"),u=A(t),d={};"static"===c&&(t.style.position="relative"),s=u.offset(),a=A.css(t,"top"),l=A.css(t,"left"),i=("absolute"===c||"fixed"===c)&&-1<(a+l).indexOf("auto")?(r=(o=u.position()).top,o.left):(r=parseFloat(a)||0,parseFloat(l)||0),b(e)&&(e=e.call(t,n,A.extend({},s))),null!=e.top&&(d.top=e.top-s.top+r),null!=e.left&&(d.left=e.left-s.left+i),"using"in e?e.using.call(t,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},A.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){A.offset.setOffset(this,e,t)});var t,n,o=this[0];return o?o.getClientRects().length?(t=o.getBoundingClientRect(),n=o.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,o=this[0],i={top:0,left:0};if("fixed"===A.css(o,"position"))e=o.getBoundingClientRect();else{for(e=this.offset(),n=o.ownerDocument,t=o.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===A.css(t,"position");)t=t.parentNode;t&&t!==o&&1===t.nodeType&&((i=A(t).offset()).top+=A.css(t,"borderTopWidth",!0),i.left+=A.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-A.css(o,"marginTop",!0),left:e.left-i.left-A.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===A.css(t,"position");)t=t.offsetParent;return t||ot})}}),A.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var a="pageYOffset"===i;A.fn[e]=function(t){return _(this,function(t,e,n){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===n)return o?o[i]:t[e];o?o.scrollTo(a?o.pageXOffset:n,a?n:o.pageYOffset):t[e]=n},e,t,arguments.length)}}),A.each(["top","left"],function(t,n){A.cssHooks[n]=Zt(y.pixelPosition,function(t,e){if(e)return e=Qt(t,n),Xt.test(e)?A(t).position()[n]+"px":e})}),A.each({Height:"height",Width:"width"},function(r,s){A.each({padding:"inner"+r,content:s,"":"outer"+r},function(o,a){A.fn[a]=function(t,e){var n=arguments.length&&(o||"boolean"!=typeof t),i=o||(!0===t||!0===e?"margin":"border");return _(this,function(t,e,n){var o;return g(t)?0===a.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+r],o["scroll"+r],t.body["offset"+r],o["offset"+r],o["client"+r])):void 0===n?A.css(t,e,i):A.style(t,e,n,i)},s,n?t:void 0,n)}})}),A.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){A.fn[e]=function(t){return this.on(e,t)}}),A.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,o){return this.on(e,t,n,o)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),A.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){A.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}});var an=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;A.proxy=function(t,e){var n,o,i;if("string"==typeof e&&(n=t[e],e=t,t=n),b(t))return o=s.call(arguments,2),(i=function(){return t.apply(e||this,o.concat(s.call(arguments)))}).guid=t.guid=t.guid||A.guid++,i},A.holdReady=function(t){t?A.readyWait++:A.ready(!0)},A.isArray=Array.isArray,A.parseJSON=JSON.parse,A.nodeName=D,A.isFunction=b,A.isWindow=g,A.camelCase=X,A.type=w,A.now=Date.now,A.isNumeric=function(t){var e=A.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},A.trim=function(t){return null==t?"":(t+"").replace(an,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return A});var rn=S.jQuery,sn=S.$;return A.noConflict=function(t){return S.$===A&&(S.$=sn),t&&S.jQuery===A&&(S.jQuery=rn),A},void 0===t&&(S.jQuery=S.$=A),A}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t($||require("jquery")):t(jQuery)}(function(j){"use strict";var i="styler",o={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function a(t,e){this.element=t,this.options=j.extend({},o,e);var n=this.options.locale;void 0!==this.options.locales[n]&&j.extend(this.options,this.options.locales[n]),this.init()}function $(t){if(!j(t.target).parents().hasClass("jq-selectbox")&&"OPTION"!=t.target.nodeName&&j("div.jq-selectbox.opened").length){var e=j("div.jq-selectbox.opened"),n=j("div.jq-selectbox__search input",e),o=j("div.jq-selectbox__dropdown",e);e.find("select").data("_"+i).options.onSelectClosed.call(e),n.length&&n.val("").keyup(),o.hide().find("li.sel").addClass("selected"),e.removeClass("focused opened dropup dropdown")}}a.prototype={init:function(){var N=j(this.element),R=this.options,F=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),t=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function M(){void 0!==N.attr("id")&&""!==N.attr("id")&&(this.id=N.attr("id")+R.idSuffix),this.title=N.attr("title"),this.classes=N.attr("class"),this.data=N.data()}if(N.is(":checkbox")){var e=function(){var t=new M,e=j('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);N.after(e).prependTo(e),N.is(":checked")&&e.addClass("checked"),N.is(":disabled")&&e.addClass("disabled"),e.click(function(t){t.preventDefault(),N.triggerHandler("click"),e.is(".disabled")||(N.is(":checked")?(N.prop("checked",!1),e.removeClass("checked")):(N.prop("checked",!0),e.addClass("checked")),N.focus().change())}),N.closest("label").add('label[for="'+N.attr("id")+'"]').on("click.styler",function(t){j(t.target).is("a")||j(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),N.on("change.styler",function(){N.is(":checked")?e.addClass("checked"):e.removeClass("checked")}).on("keydown.styler",function(t){32==t.which&&e.click()}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})};e(),N.on("refresh",function(){N.closest("label").add('label[for="'+N.attr("id")+'"]').off(".styler"),N.off(".styler").parent().before(N).remove(),e()})}else if(N.is(":radio")){var n=function(){var t=new M,n=j('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);N.after(n).prependTo(n),N.is(":checked")&&n.addClass("checked"),N.is(":disabled")&&n.addClass("disabled"),j.fn.commonParents=function(){var t=this;return t.first().parents().filter(function(){return j(this).find(t).length===t.length})},j.fn.commonParent=function(){return j(this).commonParents().first()},n.click(function(t){if(t.preventDefault(),N.triggerHandler("click"),!n.is(".disabled")){var e=j('input[name="'+N.attr("name")+'"]');e.commonParent().find(e).prop("checked",!1).parent().removeClass("checked"),N.prop("checked",!0).parent().addClass("checked"),N.focus().change()}}),N.closest("label").add('label[for="'+N.attr("id")+'"]').on("click.styler",function(t){j(t.target).is("a")||j(t.target).closest(n).length||(n.triggerHandler("click"),t.preventDefault())}),N.on("change.styler",function(){N.parent().addClass("checked")}).on("focus.styler",function(){n.is(".disabled")||n.addClass("focused")}).on("blur.styler",function(){n.removeClass("focused")})};n(),N.on("refresh",function(){N.closest("label").add('label[for="'+N.attr("id")+'"]').off(".styler"),N.off(".styler").parent().before(N).remove(),n()})}else if(N.is(":file")){var o=function(){var t=new M,o=N.data("placeholder");void 0===o&&(o=R.filePlaceholder);var e=N.data("browse");void 0!==e&&""!==e||(e=R.fileBrowse);var i=j('<div class="jq-file"><div class="jq-file__name">'+o+'</div><div class="jq-file__browse">'+e+"</div></div>").attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);N.after(i).appendTo(i),N.is(":disabled")&&i.addClass("disabled");var n=N.val(),a=j("div.jq-file__name",i);n&&a.text(n.replace(/.+[\\\/]/,"")),N.on("change.styler",function(){var t=N.val();if(N.is("[multiple]")){t="";var e=N[0].files.length;if(0<e){var n=N.data("number");void 0===n&&(n=R.fileNumber),t=n=n.replace("%s",e)}}a.text(t.replace(/.+[\\\/]/,"")),""===t?(a.text(o),i.removeClass("changed")):i.addClass("changed")}).on("focus.styler",function(){i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")}).on("click.styler",function(){i.removeClass("focused")})};o(),N.on("refresh",function(){N.off(".styler").parent().before(N).remove(),o()})}else if(N.is('input[type="number"]')){var i=function(){var t=new M,e=j('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);N.after(e).prependTo(e).wrap('<div class="jq-number__field"></div>'),N.is(":disabled")&&e.addClass("disabled");var a,r,s,n=null,o=null;void 0!==N.attr("min")&&(a=N.attr("min")),void 0!==N.attr("max")&&(r=N.attr("max")),s=void 0!==N.attr("step")&&j.isNumeric(N.attr("step"))?Number(N.attr("step")):Number(1);function i(t){var e,n=N.val();j.isNumeric(n)||(n=0,N.val("0")),t.is(".minus")?e=Number(n)-s:t.is(".plus")&&(e=Number(n)+s);var o=(s.toString().split(".")[1]||[]).length;if(0<o){for(var i="1";i.length<=o;)i+="0";e=Math.round(e*i)/i}j.isNumeric(a)&&j.isNumeric(r)?a<=e&&e<=r&&N.val(e):j.isNumeric(a)&&!j.isNumeric(r)?a<=e&&N.val(e):(j.isNumeric(a)||!j.isNumeric(r)||e<=r)&&N.val(e)}e.is(".disabled")||(e.on("mousedown","div.jq-number__spin",function(){var t=j(this);i(t),n=setTimeout(function(){o=setInterval(function(){i(t)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(n),clearInterval(o)}).on("mouseup","div.jq-number__spin",function(){N.change().trigger("input")}),N.on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}))};i(),N.on("refresh",function(){N.off(".styler").closest(".jq-number").before(N).remove(),i()})}else if(N.is("select")){var a=function(){function P(e){var n=e.prop("scrollHeight")-e.outerHeight(),o=null,i=null;e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(t){o=t.originalEvent.detail<0||0<t.originalEvent.wheelDelta?1:-1,i=e.scrollTop(),(n<=i&&o<0||i<=0&&0<o)&&(t.stopPropagation(),t.preventDefault())})}var O=j("option",N),I="";function k(){for(var t=0;t<O.length;t++){var e=O.eq(t),n="",o="",i="",a="",r="",s="",l="",c="",u="";e.prop("selected")&&(o="selected sel"),e.is(":disabled")&&(o="disabled"),e.is(":selected:disabled")&&(o="selected sel disabled"),void 0!==e.attr("id")&&""!==e.attr("id")&&(a=' id="'+e.attr("id")+R.idSuffix+'"'),void 0!==e.attr("title")&&""!==O.attr("title")&&(r=' title="'+e.attr("title")+'"'),void 0!==e.attr("class")&&(l=" "+e.attr("class"),u=' data-jqfs-class="'+e.attr("class")+'"');var d=e.data();for(var f in d)""!==d[f]&&(s+=" data-"+f+'="'+d[f]+'"');o+l!==""&&(i=' class="'+o+l+'"'),n="<li"+u+s+i+r+a+">"+e.html()+"</li>",e.parent().is("optgroup")&&(void 0!==e.parent().attr("class")&&(c=" "+e.parent().attr("class")),n="<li"+u+s+' class="'+o+l+" option"+c+'"'+r+a+">"+e.html()+"</li>",e.is(":first-child")&&(n='<li class="optgroup'+c+'">'+e.parent().attr("label")+"</li>"+n)),I+=n}}if(N.is("[multiple]")){if(t||F)return;!function(){var t=new M,e=j('<div class="jq-select-multiple jqselect"></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);N.after(e),k(),e.append("<ul>"+I+"</ul>");var n=j("ul",e),i=j("li",e),o=N.attr("size"),a=n.outerHeight(),r=i.outerHeight();void 0!==o&&0<o?n.css({height:r*o}):n.css({height:4*r}),a>e.height()&&(n.css("overflowY","scroll"),P(n),i.filter(".selected").length&&n.scrollTop(n.scrollTop()+i.filter(".selected").position().top)),N.prependTo(e),N.is(":disabled")?(e.addClass("disabled"),O.each(function(){j(this).is(":selected")&&i.eq(j(this).index()).addClass("selected")})):(i.filter(":not(.disabled):not(.optgroup)").click(function(t){N.focus();var e=j(this);if(t.ctrlKey||t.metaKey||e.addClass("selected"),t.shiftKey||e.addClass("first"),t.ctrlKey||t.metaKey||t.shiftKey||e.siblings().removeClass("selected first"),(t.ctrlKey||t.metaKey)&&(e.is(".selected")?e.removeClass("selected first"):e.addClass("selected first"),e.siblings().removeClass("first")),t.shiftKey){var n=!1,o=!1;e.siblings().removeClass("selected").siblings(".first").addClass("selected"),e.prevAll().each(function(){j(this).is(".first")&&(n=!0)}),e.nextAll().each(function(){j(this).is(".first")&&(o=!0)}),n&&e.prevAll().each(function(){if(j(this).is(".selected"))return!1;j(this).not(".disabled, .optgroup").addClass("selected")}),o&&e.nextAll().each(function(){if(j(this).is(".selected"))return!1;j(this).not(".disabled, .optgroup").addClass("selected")}),1==i.filter(".selected").length&&e.addClass("first")}O.prop("selected",!1),i.filter(".selected").each(function(){var t=j(this),e=t.index();t.is(".option")&&(e-=t.prevAll(".optgroup").length),O.eq(e).prop("selected",!0)}),N.change()}),O.each(function(t){j(this).data("optionIndex",t)}),N.on("change.styler",function(){i.removeClass("selected");var e=[];O.filter(":selected").each(function(){e.push(j(this).data("optionIndex"))}),i.not(".optgroup").filter(function(t){return-1<j.inArray(t,e)}).addClass("selected")}).on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}),a>e.height()&&N.on("keydown.styler",function(t){38!=t.which&&37!=t.which&&33!=t.which||n.scrollTop(n.scrollTop()+i.filter(".selected").position().top-r),40!=t.which&&39!=t.which&&34!=t.which||n.scrollTop(n.scrollTop()+i.filter(".selected:last").position().top-n.innerHeight()+2*r)}))}()}else!function(){var t=new M,e="",n=N.data("placeholder"),o=N.data("search"),i=N.data("search-limit"),a=N.data("search-not-found"),r=N.data("search-placeholder"),l=N.data("smart-positioning");void 0===n&&(n=R.selectPlaceholder),void 0!==o&&""!==o||(o=R.selectSearch),void 0!==i&&""!==i||(i=R.selectSearchLimit),void 0!==a&&""!==a||(a=R.selectSearchNotFound),void 0===r&&(r=R.selectSearchPlaceholder),void 0!==l&&""!==l||(l=R.selectSmartPositioning);var c=j('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);N.after(c).prependTo(c);var u=c.css("z-index");u=0<u?u:1;var s=j("div.jq-selectbox__select",c),d=j("div.jq-selectbox__select-text",c),f=O.filter(":selected");k(),o&&(e='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+a+"</div>");var h=j('<div class="jq-selectbox__dropdown">'+e+"<ul>"+I+"</ul></div>");c.append(h);var p=j("ul",h),g=j("li",h),m=j("input",h),v=j("div.jq-selectbox__not-found",h).hide();g.length<i&&m.parent().hide(),""===O.first().text()&&O.first().is(":selected")&&!1!==n?d.text(n).addClass("placeholder"):d.text(f.text());var y=0,b=0;if(g.css({display:"inline-block"}),g.each(function(){var t=j(this);t.innerWidth()>y&&(y=t.innerWidth(),b=t.width())}),g.css({display:""}),d.is(".placeholder")&&d.width()>y)d.width(d.width());else{var x=c.clone().appendTo("body").width("auto"),w=x.outerWidth();x.remove(),w==c.outerWidth()&&d.width(b)}y>c.width()&&h.width(y),""===O.first().text()&&""!==N.data("placeholder")&&g.first().hide();var C=c.outerHeight(!0),S=m.parent().outerHeight(!0)||0,T=p.css("max-height"),A=g.filter(".selected");if(A.length<1&&g.first().addClass("selected sel"),void 0===g.data("li-height")){var E=g.outerHeight();!1!==n&&(E=g.eq(1).outerHeight()),g.data("li-height",E)}var D=h.css("top");if("auto"==h.css("left")&&h.css({left:0}),"auto"==h.css("top")&&(h.css({top:C}),D=C),h.hide(),A.length&&(O.first().text()!=f.text()&&c.addClass("changed"),c.data("jqfs-class",A.data("jqfs-class")),c.addClass(A.data("jqfs-class"))),N.is(":disabled"))c.addClass("disabled");else{s.click(function(){if(j("div.jq-selectbox").filter(".opened").length&&R.onSelectClosed.call(j("div.jq-selectbox").filter(".opened")),N.focus(),!F){var e=j(window),n=g.data("li-height"),o=c.offset().top,i=e.height()-C-(o-e.scrollTop()),t=N.data("visible-options");void 0!==t&&""!==t||(t=R.selectVisibleOptions);var a=5*n,r=n*t;0<t&&t<6&&(a=r),0===t&&(r="auto");var s=function(){h.height("auto").css({bottom:"auto",top:D});function t(){p.css("max-height",Math.floor((i-20-S)/n)*n)}t(),p.css("max-height",r),"none"!=T&&p.css("max-height",T),i<h.outerHeight()+20&&t()};!0===l||1===l?a+S+20<i?(s(),c.removeClass("dropup").addClass("dropdown")):(function(){h.height("auto").css({top:"auto",bottom:D});function t(){p.css("max-height",Math.floor((o-e.scrollTop()-20-S)/n)*n)}t(),p.css("max-height",r),"none"!=T&&p.css("max-height",T),o-e.scrollTop()-20<h.outerHeight()+20&&t()}(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?a+S+20<i&&(s(),c.removeClass("dropup").addClass("dropdown")):(h.height("auto").css({bottom:"auto",top:D}),p.css("max-height",r),"none"!=T&&p.css("max-height",T)),c.offset().left+h.outerWidth()>e.width()&&h.css({left:"auto",right:0}),j("div.jqselect").css({zIndex:u-1}).removeClass("opened"),c.css({zIndex:u}),h.is(":hidden")?(j("div.jq-selectbox__dropdown:visible").hide(),h.show(),c.addClass("opened focused"),R.onSelectOpened.call(c)):(h.hide(),c.removeClass("opened dropup dropdown"),j("div.jq-selectbox").filter(".opened").length&&R.onSelectClosed.call(c)),m.length&&(m.val("").keyup(),v.hide(),m.keyup(function(){var t=j(this).val();g.each(function(){j(this).html().match(new RegExp(".*?"+t+".*?","i"))?j(this).show():j(this).hide()}),""===O.first().text()&&""!==N.data("placeholder")&&g.first().hide(),g.filter(":visible").length<1?v.show():v.hide()})),g.filter(".selected").length&&(""===N.val()?p.scrollTop(0):(p.innerHeight()/n%2!=0&&(n/=2),p.scrollTop(p.scrollTop()+g.filter(".selected").position().top-p.innerHeight()/2+n))),P(p)}}),g.hover(function(){j(this).siblings().removeClass("selected")});g.filter(".selected").text();g.filter(":not(.disabled):not(.optgroup)").click(function(){N.focus();var t=j(this),e=t.text();if(!t.is(".selected")){var n=t.index();n-=t.prevAll(".optgroup").length,t.addClass("selected sel").siblings().removeClass("selected sel"),O.prop("selected",!1).eq(n).prop("selected",!0),d.text(e),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",t.data("jqfs-class")),c.addClass(t.data("jqfs-class")),N.change()}h.hide(),c.removeClass("opened dropup dropdown"),R.onSelectClosed.call(c)}),h.mouseout(function(){j("li.sel",h).addClass("selected")}),N.on("change.styler",function(){d.text(O.filter(":selected").text()).removeClass("placeholder"),g.removeClass("selected sel").not(".optgroup").eq(N[0].selectedIndex).addClass("selected sel"),O.first().text()!=g.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),j("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(t){var e=g.data("li-height");""===N.val()?d.text(n).addClass("placeholder"):d.text(O.filter(":selected").text()),g.removeClass("selected sel").not(".optgroup").eq(N[0].selectedIndex).addClass("selected sel"),38!=t.which&&37!=t.which&&33!=t.which&&36!=t.which||(""===N.val()?p.scrollTop(0):p.scrollTop(p.scrollTop()+g.filter(".selected").position().top)),40!=t.which&&39!=t.which&&34!=t.which&&35!=t.which||p.scrollTop(p.scrollTop()+g.filter(".selected").position().top-p.innerHeight()+e),13==t.which&&(t.preventDefault(),h.hide(),c.removeClass("opened dropup dropdown"),R.onSelectClosed.call(c))}).on("keydown.styler",function(t){32==t.which&&(t.preventDefault(),s.click())}),$.registered||(j(document).on("click",$),$.registered=!0)}}()};a(),N.on("refresh",function(){N.off(".styler").parent().before(N).remove(),a()})}else N.is(":reset")&&N.on("click",function(){setTimeout(function(){N.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var t=j(this.element);t.is(":checkbox")||t.is(":radio")?(t.removeData("_"+i).off(".styler refresh").removeAttr("style").parent().before(t).remove(),t.closest("label").add('label[for="'+t.attr("id")+'"]').off(".styler")):t.is('input[type="number"]')?t.removeData("_"+i).off(".styler refresh").closest(".jq-number").before(t).remove():(t.is(":file")||t.is("select"))&&t.removeData("_"+i).off(".styler refresh").removeAttr("style").parent().before(t).remove()}},j.fn[i]=function(e){var n,o=arguments;return void 0===e||"object"==typeof e?(this.each(function(){j.data(this,"_"+i)||j.data(this,"_"+i,new a(this,e))}).promise().done(function(){var t=j(this[0]).data("_"+i);t&&t.options.onFormStyled.call()}),this):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(this.each(function(){var t=j.data(this,"_"+i);t instanceof a&&"function"==typeof t[e]&&(n=t[e].apply(t,Array.prototype.slice.call(o,1)))}),void 0!==n?n:this):void 0},$.registered=!1}),function(f){"use strict";var h=null,p=null;!function(){var t,i,a,r,s,e=["webkit","moz","o","ms"],n=f.document.createElement("div"),o=-1;for(o=0;o<e.length&&!f.requestAnimationFrame;o++)f.requestAnimationFrame=f[e[o]+"RequestAnimationFrame"];function l(){}void 0===n.nextElementSibling&&Object.defineProperty(f.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(t=f.Element.prototype).matches=t.matches||t.machesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(s=Object.prototype.hasOwnProperty,i=!{toString:null}.propertyIsEnumerable("toString"),r=(a=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],n="",o=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(n in t)s.call(t,n)&&e.push(n);if(i)for(o=0;o<r;o++)s.call(t,a[o])&&e.push(a[o]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");l.prototype=t||{};var n=new l;return l.prototype=null,void 0!==e&&Object.defineProperties(n,e),null===t&&(n.__proto__=null),n}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,n,o,i;if(null===this)throw new TypeError;if(0==(i=(o=Object(this)).length>>>0))return-1;if(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),i<=e)return-1;for(n=0<=e?e:Math.max(i-Math.abs(e),0);n<i;n++)if(n in o&&o[n]===t)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,n,o,i;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),o=function(){},i=function(){return n.apply(this instanceof o?this:t,e.concat(Array.prototype.slice.call(arguments)))},(n=this).prototype&&(o.prototype=this.prototype),i.prototype=new o,i}),f.Element.prototype.dispatchEvent||(f.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(h=function(t,e,n){var o=null,i=!1,a=null,r=null,s=null,l=[],c="",u=[],d=-1;if(s=n||f.document,(i=arguments[3])&&(i="boolean"==typeof i),"string"==typeof t)u=s.querySelectorAll(t);else if(t&&"object"==typeof t&&p.isElement(t,s))u=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(h.messages.errorFactoryInvalidContainer());u=t}if(u.length<1)throw new Error(h.messages.errorFactoryContainerNotFound());for(d=0;(o=u[d])&&(!(0<d)||i);d++)o.id?c=o.id:(c="MixItUp"+p.randomHex(),o.id=c),h.instances[c]instanceof h.Mixer?(a=h.instances[c],(!e||e&&e.debug&&!1!==e.debug.showWarnings)&&console.warn(h.messages.warningFactoryPreexistingInstance())):((a=new h.Mixer).attach(o,s,c,e),h.instances[c]=a),r=new h.Facade(a),e&&e.debug&&e.debug.enable?l.push(a):l.push(r);return i?new h.Collection(l):l[0]}).use=function(t){h.Base.prototype.callActions.call(h,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===h.extensions[t.NAME]&&(t(h),h.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(h.libraries.$=t),h.Base.prototype.callActions.call(h,"afterUse",arguments)},h.instances={},h.extensions={},h.libraries={},p={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){if(this.hasClass(t,e)){var n=new RegExp("(\\s|^)"+e+"(\\s|$)");t.className=t.className.replace(n," ").trim()}},extend:function(e,t,n,o){var i=[],a="",r=-1;n=n||!1,o=o||!1;try{if(Array.isArray(t))for(r=0;r<t.length;r++)i.push(r);else t&&(i=Object.keys(t));for(r=0;r<i.length;r++)a=i[r],!n||"object"!=typeof t[a]||this.isElement(t[a])?e[a]=t[a]:(Array.isArray(t[a])?e[a]||(e[a]=[]):e[a]||(e[a]={}),this.extend(e[a],t[a],n,o))}catch(t){if(!o)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var n=null,o="",i="",a="",r="",s="",l=-1,c=-1;if(t instanceof TypeError&&(n=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(s in o=n[1],e){for(c=0;c<o.length&&o.charAt(c)===s.charAt(c);)c++;l<c&&(l=c,r=s)}throw 1<l&&(a=h.messages.errorConfigInvalidPropertySuggestion({probableMatch:r})),i=h.messages.errorConfigInvalidProperty({erroneous:o,suggestion:a}),new TypeError(i)}throw t},template:function(o){for(var t=/\${([\w]*)}/g,i={},e=null;e=t.exec(o);)i[e[1]]=new RegExp("\\${"+e[1]+"}","g");return function(t){var e="",n=o;for(e in t=t||{},i)n=n.replace(i[e],void 0!==t[e]?t[e]:"");return n}},on:function(t,e,n,o){t&&(t.addEventListener?t.addEventListener(e,n,o):t.attachEvent&&(t["e"+e+n]=n,t[e+n]=function(){t["e"+e+n](f.event)},t.attachEvent("on"+e,t[e+n])))},off:function(t,e,n){t&&(t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+n]),t[e+n]=null))},getCustomEvent:function(t,e,n){var o=null;return n=n||f.document,"function"==typeof f.CustomEvent?o=new f.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof n.createEvent?(o=n.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((o=n.createEventObject()).type=t,o.returnValue=!1,o.cancelBubble=!1,o.detail=e),o},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var n=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++n;return n},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||f.document,!!(f.HTMLElement&&t instanceof f.HTMLElement)||(!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)},createElement:function(t,e){var n=null,o=null;for(n=(e=e||f.document).createDocumentFragment(),(o=e.createElement("div")).innerHTML=t.trim();o.firstChild;)n.appendChild(o.firstChild);return n},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var n=t.length;if(n!==e.length)return!1;for(;n--;)if(t[n]!==e[n])return!1;return!0},deepEquals:function(t,e){var n;if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(n in t)if(!e.hasOwnProperty(n)||!this.deepEquals(t[n],e[n]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e=t.slice(),n=e.length,o=n,i=-1,a=[];o--;)i=~~(Math.random()*n),a=e[o],e[o]=e[i],e[i]=a;return e},arrayFromList:function(e){var n,o;try{return Array.prototype.slice.call(e)}catch(t){for(n=[],o=0;o<e.length;o++)n.push(e[o]);return n}},debounce:function(i,a,r){var s;return function(){var t,e=this,n=arguments,o=r&&!s;t=function(){s=null,r||i.apply(e,n)},clearTimeout(s),s=setTimeout(t,a),o&&i.apply(e,n)}},position:function(t){for(var e=0,n=0,o=t;t;)e-=t.scrollLeft,n-=t.scrollTop,t===o&&(e+=t.offsetLeft,n+=t.offsetTop,o=t.offsetParent),t=t.parentElement;return{x:e,y:n}},getHypotenuse:function(t,e){var n=t.x-e.x,o=t.y-e.y;return n=n<0?-1*n:n,o=o<0?-1*o:o,Math.sqrt(Math.pow(n,2)+Math.pow(o,2))},getIntersectionRatio:function(t,e){var n,o=t.width*t.height;return n=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left)),Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*n/o},closestParent:function(t,e,n,o){var i=t.parentNode;if(o=o||f.document,n&&t.matches(e))return t;for(;i&&i!=o.body;){if(i.matches&&i.matches(e))return i;if(!i.parentNode)return null;i=i.parentNode}return null},children:function(t,e,n){var o=[],i="";return n=n||f.doc,t&&(t.id||(i="Temp"+this.randomHexKey(),t.id=i),o=n.querySelectorAll("#"+t.id+" > "+e),i&&t.removeAttribute("id")),o},clean:function(t){var e=[],n=-1;for(n=0;n<t.length;n++)""!==t[n]&&e.push(t[n]);return e},defer:function(t){var e=null,n=null,o=null;return n=new this.Deferred,h.features.has.promises?n.promise=new Promise(function(t,e){n.resolve=t,n.reject=e}):(o=f.jQuery||t.$)&&"function"==typeof o.Deferred?(e=o.Deferred(),n.promise=e.promise(),n.resolve=e.resolve,n.reject=e.reject):f.console&&console.warn(h.messages.warningNoPromiseImplementation()),n},all:function(t,e){var n=null;return h.features.has.promises?Promise.all(t):(n=f.jQuery||e.$)&&"function"==typeof n.when?n.when.apply(n,t).done(function(){return arguments}):(f.console&&console.warn(h.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,n){var o=-1,i="";if(p.dashCase(e)in t.style)return"";for(o=0;i=n[o];o++)if(i+e in t.style)return i.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:f.document,{scrollTop:f.pageYOffset,scrollLeft:f.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){var e;return!!t.offsetParent||"fixed"===(e=f.getComputedStyle(t)).position&&"hidden"!==e.visibility&&"0"!==e.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){var n=t.split("."),o=e.split("."),i=-1,a=-1,r=-1;for(r=0;r<n.length;r++){if(i=parseInt(n[r].replace(/[^\d.]/g,"")),(a=parseInt(o[r].replace(/[^\d.]/g,"")||0))<i)return!1;if(i<a)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=p.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,n){var o="";return(o+=t.block).length&&(o+=t.delineatorElement),o+=t["element"+this.pascalCase(e)],n?(o.length&&(o+=t.delineatorModifier),o+=n):o},getProperty:function(t,e){var n,o=e.split("."),i="",a=0;if(!e)return t;for(n=function(t){return t?t[i]:null};a<o.length;)i=o[a],t=n(t),a++;return void 0!==t?t:null}},h.h=p,h.Base=function(){},h.Base.prototype={constructor:h.Base,callActions:function(t,e){var n=this.constructor.actions[t],o="";if(n&&!p.isEmptyObject(n))for(o in n)n[o].apply(this,e)},callFilters:function(t,e,n){var o=this.constructor.filters[t],i=e,a="";if(!o||p.isEmptyObject(o))return i;for(a in n=n||[],o)(n=p.arrayFromList(n)).unshift(i),i=o[a].apply(this,n);return i}},h.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){p.extend(this.prototype,t)},this.registerAction=function(t,e,n){(this.actions[t]=this.actions[t]||{})[e]=n},this.registerFilter=function(t,e,n){(this.filters[t]=this.filters[t]||{})[e]=n}},h.Features=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new h.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},h.BaseStatic.call(h.Features),h.Features.prototype=Object.create(h.Base.prototype),p.extend(h.Features.prototype,{constructor:h.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof f.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),p.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=p.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=p.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=p.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+p.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+p.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+p.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+p.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+p.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),h.Has=function(){this.transitions=!1,this.promises=!1,p.seal(this)},h.features=new h.Features,h.features.init(),h.ConfigAnimation=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigAnimation),h.ConfigAnimation.prototype=Object.create(h.Base.prototype),h.ConfigAnimation.prototype.constructor=h.ConfigAnimation,h.ConfigBehavior=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigBehavior),h.ConfigBehavior.prototype=Object.create(h.Base.prototype),h.ConfigBehavior.prototype.constructor=h.ConfigBehavior,h.ConfigCallbacks=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigCallbacks),h.ConfigCallbacks.prototype=Object.create(h.Base.prototype),h.ConfigCallbacks.prototype.constructor=h.ConfigCallbacks,h.ConfigControls=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigControls),h.ConfigControls.prototype=Object.create(h.Base.prototype),h.ConfigControls.prototype.constructor=h.ConfigControls,h.ConfigClassNames=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigClassNames),h.ConfigClassNames.prototype=Object.create(h.Base.prototype),h.ConfigClassNames.prototype.constructor=h.ConfigClassNames,h.ConfigData=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigData),h.ConfigData.prototype=Object.create(h.Base.prototype),h.ConfigData.prototype.constructor=h.ConfigData,h.ConfigDebug=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigDebug),h.ConfigDebug.prototype=Object.create(h.Base.prototype),h.ConfigDebug.prototype.constructor=h.ConfigDebug,h.ConfigLayout=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigLayout),h.ConfigLayout.prototype=Object.create(h.Base.prototype),h.ConfigLayout.prototype.constructor=h.ConfigLayout,h.ConfigLoad=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigLoad),h.ConfigLoad.prototype=Object.create(h.Base.prototype),h.ConfigLoad.prototype.constructor=h.ConfigLoad,h.ConfigSelectors=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigSelectors),h.ConfigSelectors.prototype=Object.create(h.Base.prototype),h.ConfigSelectors.prototype.constructor=h.ConfigSelectors,h.ConfigRender=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigRender),h.ConfigRender.prototype=Object.create(h.Base.prototype),h.ConfigRender.prototype.constructor=h.ConfigRender,h.ConfigTemplates=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.ConfigTemplates),h.ConfigTemplates.prototype=Object.create(h.Base.prototype),h.ConfigTemplates.prototype.constructor=h.ConfigTemplates,h.Config=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.animation=new h.ConfigAnimation,this.behavior=new h.ConfigBehavior,this.callbacks=new h.ConfigCallbacks,this.controls=new h.ConfigControls,this.classNames=new h.ConfigClassNames,this.data=new h.ConfigData,this.debug=new h.ConfigDebug,this.layout=new h.ConfigLayout,this.load=new h.ConfigLoad,this.selectors=new h.ConfigSelectors,this.render=new h.ConfigRender,this.templates=new h.ConfigTemplates,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.Config),h.Config.prototype=Object.create(h.Base.prototype),h.Config.prototype.constructor=h.Config,h.MixerDom=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.MixerDom),h.MixerDom.prototype=Object.create(h.Base.prototype),h.MixerDom.prototype.constructor=h.MixerDom,h.UiClassNames=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.UiClassNames),h.UiClassNames.prototype=Object.create(h.Base.prototype),h.UiClassNames.prototype.constructor=h.UiClassNames,h.CommandDataset=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandDataset),h.CommandDataset.prototype=Object.create(h.Base.prototype),h.CommandDataset.prototype.constructor=h.CommandDataset,h.CommandMultimix=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandMultimix),h.CommandMultimix.prototype=Object.create(h.Base.prototype),h.CommandMultimix.prototype.constructor=h.CommandMultimix,h.CommandFilter=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandFilter),h.CommandFilter.prototype=Object.create(h.Base.prototype),h.CommandFilter.prototype.constructor=h.CommandFilter,h.CommandSort=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandSort),h.CommandSort.prototype=Object.create(h.Base.prototype),h.CommandSort.prototype.constructor=h.CommandSort,h.CommandInsert=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandInsert),h.CommandInsert.prototype=Object.create(h.Base.prototype),h.CommandInsert.prototype.constructor=h.CommandInsert,h.CommandRemove=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandRemove),h.CommandRemove.prototype=Object.create(h.Base.prototype),h.CommandRemove.prototype.constructor=h.CommandRemove,h.CommandChangeLayout=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.CommandChangeLayout),h.CommandChangeLayout.prototype=Object.create(h.Base.prototype),h.CommandChangeLayout.prototype.constructor=h.CommandChangeLayout,h.ControlDefinition=function(t,e,n,o){h.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=n||!1,this.parent=o||"",this.callActions("afterConstruct"),p.freeze(this),p.seal(this)},h.BaseStatic.call(h.ControlDefinition),h.ControlDefinition.prototype=Object.create(h.Base.prototype),h.ControlDefinition.prototype.constructor=h.ControlDefinition,h.controlDefinitions=[],h.controlDefinitions.push(new h.ControlDefinition("multimix","[data-filter][data-sort]")),h.controlDefinitions.push(new h.ControlDefinition("filter","[data-filter]")),h.controlDefinitions.push(new h.ControlDefinition("sort","[data-sort]")),h.controlDefinitions.push(new h.ControlDefinition("toggle","[data-toggle]")),h.Control=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new h.UiClassNames,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.Control),h.Control.prototype=Object.create(h.Base.prototype),p.extend(h.Control.prototype,{constructor:h.Control,init:function(t,e,n){var o=this;if(this.callActions("beforeInit",arguments),o.el=t,o.type=e,o.selector=n,o.selector)o.status="live";else switch(o.canDisable="boolean"==typeof o.el.disable,o.type){case"filter":o.filter=o.el.getAttribute("data-filter");break;case"toggle":o.filter=o.el.getAttribute("data-toggle");break;case"sort":o.sort=o.el.getAttribute("data-sort");break;case"multimix":o.filter=o.el.getAttribute("data-filter"),o.sort=o.el.getAttribute("data-sort")}o.bindClick(),h.controls.push(o),this.callActions("afterInit",arguments)},isBound:function(t){var e;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this,n=-1;this.callActions("beforeRemoveBinding",arguments),-1<(n=e.bound.indexOf(t))&&e.bound.splice(n,1),e.bound.length<1&&(e.unbindClick(),n=h.controls.indexOf(e),h.controls.splice(n,1),"active"===e.status&&e.renderStatus(e.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},p.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),p.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e=this,n=null,o=null,i=!1,a={},r=null,s=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,o=e.bound[0],n=e.selector?p.closestParent(t.target,o.config.selectors.control+e.selector,!0,o.dom.document):e.el){switch(e.type){case"filter":a.filter=e.filter||n.getAttribute("data-filter");break;case"sort":a.sort=e.sort||n.getAttribute("data-sort");break;case"multimix":a.filter=e.filter||n.getAttribute("data-filter"),a.sort=e.sort||n.getAttribute("data-sort");break;case"toggle":a.filter=e.filter||n.getAttribute("data-toggle"),i="live"===e.status?p.hasClass(n,e.classNames.active):"active"===e.status}for(l=0;l<e.bound.length;l++)r=new h.CommandMultimix,p.extend(r,a),s.push(r);for(s=e.callFilters("commandsHandleClick",s,arguments),e.pending=e.bound.length,l=0;o=e.bound[l];l++)(a=s[l])&&(o.lastClicked||(o.lastClicked=n),h.events.fire("mixClick",o.dom.container,{state:o.state,instance:o,originalEvent:t,control:o.lastClicked},o.dom.document),"function"==typeof o.config.callbacks.onMixClick&&!1===o.config.callbacks.onMixClick.call(o.lastClicked,o.state,t,o)||("toggle"===e.type?i?o.toggleOff(a.filter):o.toggleOn(a.filter):o.multimix(a)));this.callActions("afterHandleClick",arguments)}else e.callActions("afterHandleClick",arguments)},update:function(t,e){var n=this,o=new h.CommandMultimix;n.callActions("beforeUpdate",arguments),n.pending--,n.pending=Math.max(0,n.pending),0<n.pending||("live"===n.status?n.updateLive(t,e):(o.sort=n.sort,o.filter=n.filter,n.callFilters("actionsUpdate",o,arguments),n.parseStatusChange(n.el,t,o,e)),n.callActions("afterUpdate",arguments))},updateLive:function(t,e){var n,o=this,i=null,a=null,r=-1;if(o.callActions("beforeUpdateLive",arguments),o.el){for(n=o.el.querySelectorAll(o.selector),r=0;a=n[r];r++){switch(i=new h.CommandMultimix,o.type){case"filter":i.filter=a.getAttribute("data-filter");break;case"sort":i.sort=a.getAttribute("data-sort");break;case"multimix":i.filter=a.getAttribute("data-filter"),i.sort=a.getAttribute("data-sort");break;case"toggle":i.filter=a.getAttribute("data-toggle")}i=o.callFilters("actionsUpdateLive",i,arguments),o.parseStatusChange(a,t,i,e)}o.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,n,o){var i=this,a="",r=-1;switch(i.callActions("beforeParseStatusChange",arguments),i.type){case"filter":e.filter===n.filter?i.renderStatus(t,"active"):i.renderStatus(t,"inactive");break;case"multimix":e.sort===n.sort&&e.filter===n.filter?i.renderStatus(t,"active"):i.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(a=e.sort.replace(/:asc/g,"")),e.sort===n.sort||a===n.sort?i.renderStatus(t,"active"):i.renderStatus(t,"inactive");break;case"toggle":for(o.length<1&&i.renderStatus(t,"inactive"),e.filter===n.filter&&i.renderStatus(t,"active"),r=0;r<o.length;r++){if(o[r]===n.filter){i.renderStatus(t,"active");break}i.renderStatus(t,"inactive")}}i.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var n=this;switch(n.callActions("beforeRenderStatus",arguments),e){case"active":p.addClass(t,n.classNames.active),p.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"inactive":p.removeClass(t,n.classNames.active),p.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"disabled":n.canDisable&&(n.el.disabled=!0),p.addClass(t,n.classNames.disabled),p.removeClass(t,n.classNames.active)}"live"!==n.status&&(n.status=e),n.callActions("afterRenderStatus",arguments)}}),h.controls=[],h.StyleData=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new h.TransformData,this.translateX=new h.TransformData,this.translateY=new h.TransformData,this.translateZ=new h.TransformData,this.rotateX=new h.TransformData,this.rotateY=new h.TransformData,this.rotateZ=new h.TransformData,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.StyleData),h.StyleData.prototype=Object.create(h.Base.prototype),h.StyleData.prototype.constructor=h.StyleData,h.TransformData=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.TransformData),h.TransformData.prototype=Object.create(h.Base.prototype),h.TransformData.prototype.constructor=h.TransformData,h.TransformDefaults=function(){h.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.TransformDefaults),h.TransformDefaults.prototype=Object.create(h.StyleData.prototype),h.TransformDefaults.prototype.constructor=h.TransformDefaults,h.transformDefaults=new h.TransformDefaults,h.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},h.Events=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.Events),h.Events.prototype=Object.create(h.Base.prototype),h.Events.prototype.constructor=h.Events,h.Events.prototype.fire=function(t,e,n,o){var i,a=new h.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');a.state=new h.State,p.extend(a.state,n.state),n.futureState&&(a.futureState=new h.State,p.extend(a.futureState,n.futureState)),a.instance=n.instance,n.originalEvent&&(a.originalEvent=n.originalEvent),i=p.getCustomEvent(t,a,o),this.callFilters("eventFire",i,arguments),e.dispatchEvent(i)},h.events=new h.Events,h.QueueItem=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.QueueItem),h.QueueItem.prototype=Object.create(h.Base.prototype),h.QueueItem.prototype.constructor=h.QueueItem,h.Mixer=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.config=new h.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new h.MixerDom,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.Mixer),h.Mixer.prototype=Object.create(h.Base.prototype),p.extend(h.Mixer.prototype,{constructor:h.Mixer,attach:function(t,e,n,o){var i=this,a=null,r=-1;for(i.callActions("beforeAttach",arguments),i.id=n,o&&p.extend(i.config,o,!0,!0),i.sanitizeConfig(),i.cacheDom(t,e),i.config.layout.containerClassName&&p.addClass(i.dom.container,i.config.layout.containerClassName),h.features.has.transitions||(i.config.animation.enable=!1),void 0===f.console&&(i.config.debug.showWarnings=!1),i.config.data.uidKey&&(i.config.controls.enable=!1),i.indexTargets(),i.state=i.getInitialState(),r=0;a=i.lastOperation.toHide[r];r++)a.hide();i.config.controls.enable&&(i.initControls(),i.buildToggleArray(null,i.state),i.updateControls({filter:i.state.activeFilter,sort:i.state.activeSort})),i.parseEffects(),i.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new h.State,n=new h.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(h.messages.errorConfigDataUidKeyNotSet());n.startDataset=n.newDataset=e.activeDataset=t.config.load.dataset.slice(),n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,n.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(n.newSort=e.activeSort,t.sortOperation(n),t.printSort(!1,n),t.targets=n.newOrder):n.startOrder=n.newOrder=t.targets,n.startFilter=n.newFilter=e.activeFilter,n.startSort=n.newSort=e.activeSort,n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,"all"===n.newFilter.selector?n.newFilter.selector=t.config.selectors.target:"none"===n.newFilter.selector&&(n.newFilter.selector="");return n=t.callFilters("operationGetInitialState",n,[e]),(t.lastOperation=n).newFilter&&t.filterOperation(n),e=t.buildState(n)},cacheDom:function(t,e){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=e,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=t,n.dom.parent=t,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e=this,n=null,o=null,i=-1;if(e.callActions("beforeIndexTargets",arguments),e.dom.targets=e.config.layout.allowNestedTargets?e.dom.container.querySelectorAll(e.config.selectors.target):p.children(e.dom.container,e.config.selectors.target,e.dom.document),e.dom.targets=p.arrayFromList(e.dom.targets),e.targets=[],(t=e.config.load.dataset)&&t.length!==e.dom.targets.length)throw new Error(h.messages.errorDatasetPrerenderedMismatch());if(e.dom.targets.length){for(i=0;o=e.dom.targets[i];i++)(n=new h.Target).init(o,e,t?t[i]:void 0),n.isInDom=!0,e.targets.push(n);e.dom.parent=e.dom.targets[0].parentElement===e.dom.container?e.dom.container:e.dom.targets[0].parentElement}e.origOrder=e.targets,e.callActions("afterIndexTargets",arguments)},initControls:function(){var t=this,e="",n=null,o=null,i=null,a=null,r=null,s=-1,l=-1;switch(t.callActions("beforeInitControls",arguments),t.config.controls.scope){case"local":i=t.dom.container;break;case"global":i=t.dom.document;break;default:throw new Error(h.messages.errorConfigInvalidControlsScope())}for(s=0;e=h.controlDefinitions[s];s++)if(t.config.controls.live||e.live){if(e.parent){if(!(a=t.dom[e.parent])||a.length<0)continue;"number"!=typeof a.length&&(a=[a])}else a=[i];for(l=0;o=a[l];l++)r=t.getControl(o,e.type,e.selector),t.controls.push(r)}else for(n=i.querySelectorAll(t.config.selectors.control+e.selector),l=0;o=n[l];l++)(r=t.getControl(o,e.type,""))&&t.controls.push(r);t.callActions("afterInitControls",arguments)},getControl:function(t,e,n){var o=this,i=null,a=-1;if(o.callActions("beforeGetControl",arguments),!n)for(a=0;i=h.controls[a];a++){if(i.el===t&&i.isBound(o))return o.callFilters("controlGetControl",null,arguments);if(i.el===t&&i.type===e&&i.selector===n)return i.addBinding(o),o.callFilters("controlGetControl",i,arguments)}return(i=new h.Control).init(t,e,n),i.classNames.base=p.getClassname(o.config.classNames,e),i.classNames.active=p.getClassname(o.config.classNames,e,o.config.classNames.modifierActive),i.classNames.disabled=p.getClassname(o.config.classNames,e,o.config.classNames.modifierDisabled),i.addBinding(o),o.callFilters("controlGetControl",i,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",n="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=p.clean(t.toggleArray),""===(n=t.toggleArray.join(e))&&(n=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",n,arguments)},buildToggleArray:function(t,e){var n=this,o="";if(n.callActions("beforeBuildToggleArray",arguments),t&&t.filter)o=t.filter.selector.replace(/\s/g,"");else{if(!e)return;o=e.activeFilter.selector.replace(/\s/g,"")}o!==n.config.selectors.target&&"all"!==o||(o=""),"or"===n.config.controls.toggleLogic?n.toggleArray=o.split(","):n.toggleArray=n.splitCompoundSelector(o),n.toggleArray=p.clean(n.toggleArray),n.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),n=[],o="",i=-1;for(""===e[0]&&e.shift(),i=0;i<e.length;i++)i%2==0&&(o=""),o+=e[i],i%2!=0&&n.push(o);return n},updateControls:function(t){var e=this,n=null,o=new h.CommandMultimix,i=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?o.filter=t.filter.selector:o.filter=e.state.activeFilter.selector,t.sort?o.sort=e.buildSortString(t.sort):o.sort=e.buildSortString(e.state.activeSort),o.filter===e.config.selectors.target&&(o.filter="all"),""===o.filter&&(o.filter="none"),p.freeze(o),i=0;n=e.controls[i];i++)n.update(o,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var n,o=this,i=-1,a=null,r=null,s=null,l=-1;if(o.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),n=o.getNextSibling(t.index,t.sibling,t.position),a=o.dom.document.createDocumentFragment(),i=n?p.index(n,o.config.selectors.target):o.targets.length,t.collection){for(l=0;s=t.collection[l];l++){if(-1<o.dom.targets.indexOf(s))throw new Error(h.messages.errorInsertPreexistingElement());s.style.display="none",a.appendChild(s),a.appendChild(o.dom.document.createTextNode(" ")),p.isElement(s,o.dom.document)&&s.matches(o.config.selectors.target)&&((r=new h.Target).init(s,o),r.isInDom=!0,o.targets.splice(i,0,r),i++)}o.dom.parent.insertBefore(a,n)}e.startOrder=o.origOrder=o.targets,o.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,n){var o=this,i=null;return t=Math.max(t,0),e&&"before"===n?i=e:e&&"after"===n?i=e.nextElementSibling||null:0<o.targets.length&&void 0!==t?i=t<o.targets.length||!o.targets.length?o.targets[t].dom.el:o.targets[o.targets.length-1].dom.el.nextElementSibling:0===o.targets.length&&0<o.dom.parent.children.length&&(o.config.layout.siblingAfter?i=o.config.layout.siblingAfter:o.config.layout.siblingBefore?i=o.config.layout.siblingBefore.nextElementSibling:o.dom.parent.children[0]),o.callFilters("elementGetNextSibling",i,arguments)},filterOperation:function(t){var e,n=!1,o=-1,i=null,a=-1;for(this.callActions("beforeFilterOperation",arguments),e=t.newFilter.action,a=0;i=t.newOrder[a];a++)n=t.newFilter.collection?-1<t.newFilter.collection.indexOf(i.dom.el):""!==t.newFilter.selector&&i.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(n,i,e,t);if(t.toRemove.length)for(a=0;i=t.show[a];a++)-1<t.toRemove.indexOf(i)&&(t.show.splice(a,1),-1<(o=t.toShow.indexOf(i))&&t.toShow.splice(o,1),t.toHide.push(i),t.hide.push(i),a--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,n,o){var i,a=Array.prototype.slice.call(arguments,1);i=this.callFilters("testResultEvaluateHideShow",t,a),this.callActions("beforeEvaluateHideShow",arguments),!0===i&&"show"===n||!1===i&&"hide"===n?(o.show.push(e),e.isShown||o.toShow.push(e)):(o.hide.push(e),e.isShown&&o.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(n){var o=this,t=[],e=null,i=null,a=-1;if(o.callActions("beforeSortOperation",arguments),n.startOrder=o.targets,n.newSort.collection){for(t=[],a=0;i=n.newSort.collection[a];a++){if(o.dom.targets.indexOf(i)<0)throw new Error(h.messages.errorSortNonExistentElement());(e=new h.Target).init(i,o),e.isInDom=!0,t.push(e)}n.newOrder=t}else"random"===n.newSort.order?n.newOrder=p.arrayShuffle(n.startOrder):""===n.newSort.attribute?(n.newOrder=o.origOrder.slice(),"desc"===n.newSort.order&&n.newOrder.reverse()):(n.newOrder=n.startOrder.slice(),n.newOrder.sort(function(t,e){return o.compare(t,e,n.newSort)}));p.isEqualArray(n.newOrder,n.startOrder)&&(n.willSort=!1),o.callActions("afterSortOperation",arguments)},compare:function(t,e,n){var o=n.order,i=this.getAttributeValue(t,n.attribute),a=this.getAttributeValue(e,n.attribute);return a=isNaN(+i)||isNaN(+a)?(i=i.toLowerCase(),a.toLowerCase()):(i=+i,+a),i<a?"asc"===o?-1:1:a<i?"asc"===o?1:-1:i===a&&n.next?this.compare(t,e,n.next):0},getAttributeValue:function(t,e){var n;return null===(n=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(h.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",n||0,arguments)},printSort:function(t,e){var n,o=this,i=t?e.newOrder:e.startOrder,a=t?e.startOrder:e.newOrder,r=i.length?i[i.length-1].dom.el.nextElementSibling:null,s=f.document.createDocumentFragment(),l=null,c=null,u=-1;for(o.callActions("beforePrintSort",arguments),u=0;l=i[u];u++)"absolute"!==(c=l.dom.el).style.position&&(p.removeWhitespace(c.previousSibling),c.parentElement.removeChild(c));for((n=r?r.previousSibling:o.dom.parent.lastChild)&&"#text"===n.nodeName&&p.removeWhitespace(n),u=0;l=a[u];u++)c=l.dom.el,p.isElement(s.lastChild)&&s.appendChild(f.document.createTextNode(" ")),s.appendChild(c);o.dom.parent.firstChild&&o.dom.parent.firstChild!==r&&s.insertBefore(f.document.createTextNode(" "),s.childNodes[0]),r?(s.appendChild(f.document.createTextNode(" ")),o.dom.parent.insertBefore(s,r)):o.dom.parent.appendChild(s),o.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){var n=t.split(" "),o=e,i=[],a=-1;for(a=0;a<n.length;a++){switch(i=n[a].split(":"),o.sortString=n[a],o.attribute=p.dashCase(i[0]),o.order=i[1]||"asc",o.attribute){case"default":o.attribute="";break;case"random":o.attribute="",o.order="random"}if(!o.attribute||"random"===o.order)break;a<n.length-1&&(o.next=new h.CommandSort,p.freeze(o),o=o.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",n=t.config.animation.effectsIn||t.config.animation.effects,o=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new h.StyleData,t.effectsOut=new h.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",n,t.effectsIn,t.transformIn),t.parseEffect("fade",o,t.effectsOut,t.transformOut,!0),h.transformDefaults)h.transformDefaults[e]instanceof h.TransformData&&(t.parseEffect(e,n,t.effectsIn,t.transformIn),t.parseEffect(e,o,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",n,t.effectsIn,t.transformIn),t.parseEffect("stagger",o,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,n,o,i){var a,r=this,s="",l="",c=["%","px","em","rem","vh","vw","deg"],u="",d=-1;if(r.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(h.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(r.staggerDuration=0);else{switch(-1<(a=e.indexOf(t+"("))&&(s=e.substring(a),l=/\(([^)]+)\)/.exec(s)[1]),t){case"fade":n.opacity=l?parseFloat(l):0;break;case"stagger":r.staggerDuration=l?parseFloat(l):100;break;default:if(i&&r.config.animation.reverseOut&&"scale"!==t?n[t].value=-1*(l?parseFloat(l):h.transformDefaults[t].value):n[t].value=l?parseFloat(l):h.transformDefaults[t].value,l){for(d=0;u=c[d];d++)if(-1<l.indexOf(u)){n[t].unit=u;break}}else n[t].unit=h.transformDefaults[t].unit;o.push(t+"("+n[t].value+n[t].unit+")")}r.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,n=new h.State,o=null,i=-1;for(e.callActions("beforeBuildState",arguments),i=0;o=e.targets[i];i++)(!t.toRemove.length||t.toRemove.indexOf(o)<0)&&n.targets.push(o.dom.el);for(i=0;o=t.matching[i];i++)n.matching.push(o.dom.el);for(i=0;o=t.show[i];i++)n.show.push(o.dom.el);for(i=0;o=t.hide[i];i++)(!t.toRemove.length||t.toRemove.indexOf(o)<0)&&n.hide.push(o.dom.el);return n.id=e.id,n.container=e.dom.container,n.activeFilter=t.newFilter,n.activeSort=t.newSort,n.activeDataset=t.newDataset,n.activeContainerClassName=t.newContainerClassName,n.hasFailed=t.hasFailed,n.totalTargets=e.targets.length,n.totalShow=t.show.length,n.totalHide=t.hide.length,n.totalMatching=t.matching.length,n.triggerElement=t.triggerElement,e.callFilters("stateBuildState",n,arguments)},goMix:function(t,e){var n=this,o=null;return n.callActions("beforeGoMix",arguments),n.config.animation.duration&&n.config.animation.effects&&p.isVisible(n.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),h.events.fire("mixStart",n.dom.container,{state:e.startState,futureState:e.newState,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixStart&&n.config.callbacks.onMixStart.call(n.dom.container,e.startState,e.newState,n),p.removeClass(n.dom.container,p.getClassname(n.config.classNames,"container",n.config.classNames.modifierFailed)),o=n.userDeferred?n.userDeferred:n.userDeferred=p.defer(h.libraries),n.isBusy=!0,t&&h.features.has.transitions?(f.pageYOffset!==e.docState.scrollTop&&f.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),n.config.animation.applyPerspective&&(n.dom.parent.style[h.features.perspectiveProp]=n.config.animation.perspectiveDistance,n.dom.parent.style[h.features.perspectiveOriginProp]=n.config.animation.perspectiveOrigin),n.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),n.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(n.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){n.moveTargets(e)})):n.config.debug.fauxAsync?setTimeout(function(){n.cleanUp(e)},n.config.animation.duration):n.cleanUp(e),n.callFilters("promiseGoMix",o.promise,arguments)},getStartMixData:function(t){var e=this,n=f.getComputedStyle(e.dom.parent),o=e.dom.parent.getBoundingClientRect(),i=null,a={},r=-1,s=n[h.features.boxSizingProp];for(e.incPadding="border-box"===s,e.callActions("beforeGetStartMixData",arguments),r=0;i=t.show[r];r++)a=i.getPosData(),t.showPosData[r]={startPosData:a};for(r=0;i=t.toHide[r];r++)a=i.getPosData(),t.toHidePosData[r]={startPosData:a};t.startX=o.left,t.startY=o.top,t.startHeight=e.incPadding?o.height:o.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.startWidth=e.incPadding?o.width:o.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,n=null,o=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),o=0;n=t.toShow[o];o++)n.show();t.willChangeLayout&&(p.removeClass(e.dom.container,t.startContainerClassName),p.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,n=-1;for(this.callActions("beforeGetInterMixData",arguments),n=0;e=t.show[n];n++)t.showPosData[n].interPosData=e.getPosData();for(n=0;e=t.toHide[n];n++)t.toHidePosData[n].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,n=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),n=0;e=t.toHide[n];n++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,n=this,o=null,i=null,a=-1;for(n.callActions("beforeGetFinalMixData",arguments),a=0;i=t.show[a];a++)t.showPosData[a].finalPosData=i.getPosData();for(a=0;i=t.toHide[a];a++)t.toHidePosData[a].finalPosData=i.getPosData();for((n.config.animation.clampHeight||n.config.animation.clampWidth)&&(n.dom.parent.style.height=n.dom.parent.style.width=n.dom.parent.style.overflow=""),n.incPadding||(o=f.getComputedStyle(n.dom.parent)),e=n.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=n.incPadding?e.height:e.height-parseFloat(o.paddingTop)-parseFloat(o.paddingBottom)-parseFloat(o.borderTop)-parseFloat(o.borderBottom),t.newWidth=n.incPadding?e.width:e.width-parseFloat(o.paddingLeft)-parseFloat(o.paddingRight)-parseFloat(o.borderLeft)-parseFloat(o.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&n.printSort(!0,t),a=0;i=t.toShow[a];a++)i.hide();for(a=0;i=t.toHide[a];a++)i.show();t.willChangeLayout&&(p.removeClass(n.dom.container,t.newContainerClassName),p.addClass(n.dom.container,n.config.layout.containerClassName)),n.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,n=null,o=null,i=Object.getOwnPropertyNames(e.effectsIn),a="",r=null,s=-1,l=-1,c=-1,u=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;n=t.show[c];c++)for((o=t.showPosData[c]).posIn=new h.StyleData,o.posOut=new h.StyleData,o.tweenData=new h.StyleData,n.isShown?(o.posIn.x=o.startPosData.x-o.interPosData.x,o.posIn.y=o.startPosData.y-o.interPosData.y):o.posIn.x=o.posIn.y=0,o.posOut.x=o.finalPosData.x-o.interPosData.x,o.posOut.y=o.finalPosData.y-o.interPosData.y,o.posIn.opacity=n.isShown?1:e.effectsIn.opacity,o.posOut.opacity=1,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,n.isShown||e.config.animation.nudge||(o.posIn.x=o.posOut.x,o.posIn.y=o.posOut.y),o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,e.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,s=(o.startPosData.width||o.finalPosData.width)-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-s,l=(o.startPosData.height||o.finalPosData.height)-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-l,o.posOut.width=o.finalPosData.width,o.posOut.height=o.finalPosData.height,s=(o.finalPosData.width||o.startPosData.width)-o.interPosData.width,o.posOut.marginRight=o.finalPosData.marginRight-s,l=(o.finalPosData.height||o.startPosData.height)-o.interPosData.height,o.posOut.marginBottom=o.finalPosData.marginBottom-l,o.tweenData.width=o.posOut.width-o.posIn.width,o.tweenData.height=o.posOut.height-o.posIn.height,o.tweenData.marginRight=o.posOut.marginRight-o.posIn.marginRight,o.tweenData.marginBottom=o.posOut.marginBottom-o.posIn.marginBottom),u=0;a=i[u];u++)(r=e.effectsIn[a])instanceof h.TransformData&&r.value&&(o.posIn[a].value=r.value,o.posOut[a].value=0,o.tweenData[a].value=o.posOut[a].value-o.posIn[a].value,o.posIn[a].unit=o.posOut[a].unit=o.tweenData[a].unit=r.unit);for(c=0;n=t.toHide[c];c++)for((o=t.toHidePosData[c]).posIn=new h.StyleData,o.posOut=new h.StyleData,o.tweenData=new h.StyleData,o.posIn.x=n.isShown?o.startPosData.x-o.interPosData.x:0,o.posIn.y=n.isShown?o.startPosData.y-o.interPosData.y:0,o.posOut.x=e.config.animation.nudge?0:o.posIn.x,o.posOut.y=e.config.animation.nudge?0:o.posIn.y,o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,e.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,s=o.startPosData.width-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-s,l=o.startPosData.height-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-l),o.posIn.opacity=1,o.posOut.opacity=e.effectsOut.opacity,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,u=0;a=i[u];u++)(r=e.effectsOut[a])instanceof h.TransformData&&r.value&&(o.posIn[a].value=0,o.posOut[a].value=r.value,o.tweenData[a].value=o.posOut[a].value-o.posIn[a].value,o.posIn[a].unit=o.posOut[a].unit=o.tweenData[a].unit=r.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,n=null,o=null,i=null,a="",r=!1,s=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;n=t.show[l];l++)o=new h.IMoveData,i=t.showPosData[l],a=n.isShown?"none":"show",(r=e.willTransition(a,t.hasEffect,i.posIn,i.posOut))&&s++,n.show(),o.posIn=i.posIn,o.posOut=i.posOut,o.statusChange=a,o.staggerIndex=s,o.operation=t,o.callback=r?c:null,n.move(o);for(l=0;n=t.toHide[l];l++)i=t.toHidePosData[l],o=new h.IMoveData,a="hide",r=e.willTransition(a,i.posIn,i.posOut),o.posIn=i.posIn,o.posOut=i.posOut,o.statusChange=a,o.staggerIndex=l,o.operation=t,o.callback=r?c:null,n.move(o);e.config.animation.animateResizeContainer&&(e.dom.parent.style[h.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(p.removeClass(e.dom.container,e.config.layout.ContainerClassName),p.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],e="",n=null,o=!1,i=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(i=0;e=t[i];i++)if(0!==("undefined"!==(n=this.effectsIn[e]).value?n.value:n)){o=!0;break}return this.callFilters("resultHasEffect",o,arguments)},willTransition:function(t,e,n,o){var i=!1;return i=!!p.isVisible(this.dom.container)&&(!!("none"!==t&&e||n.x!==o.x||n.y!==o.y)||!!this.config.animation.animateResizeTargets&&(n.width!==o.width||n.height!==o.height||n.marginRight!==o.marginRight||n.marginTop!==o.marginTop)),this.callFilters("resultWillTransition",i,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e=this,n=null,o=null,i=null,a=null,r=-1;for(e.callActions("beforeCleanUp",arguments),e.targetsMoved=e.targetsImmovable=e.targetsBound=e.targetsDone=0,r=0;n=t.show[r];r++)n.cleanUp(),n.show();for(r=0;n=t.toHide[r];r++)n.cleanUp(),n.hide();if(t.willSort&&e.printSort(!1,t),e.dom.parent.style[h.features.transitionProp]=e.dom.parent.style.height=e.dom.parent.style.width=e.dom.parent.style.overflow=e.dom.parent.style[h.features.perspectiveProp]=e.dom.parent.style[h.features.perspectiveOriginProp]="",t.willChangeLayout&&(p.removeClass(e.dom.container,t.startContainerClassName),p.addClass(e.dom.container,t.newContainerClassName)),t.toRemove.length){for(r=0;n=e.targets[r];r++)-1<t.toRemove.indexOf(n)&&((o=n.dom.el.previousSibling)&&"#text"===o.nodeName&&(i=n.dom.el.nextSibling)&&"#text"===i.nodeName&&p.removeWhitespace(o),t.willSort||e.dom.parent.removeChild(n.dom.el),e.targets.splice(r,1),n.isInDom=!1,r--);e.origOrder=e.targets}t.willSort&&(e.targets=t.newOrder),e.state=t.newState,e.lastOperation=t,e.dom.targets=e.state.targets,h.events.fire("mixEnd",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixEnd&&e.config.callbacks.onMixEnd.call(e.dom.container,e.state,e),t.hasFailed&&(h.events.fire("mixFail",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixFail&&e.config.callbacks.onMixFail.call(e.dom.container,e.state,e),p.addClass(e.dom.container,p.getClassname(e.config.classNames,"container",e.config.classNames.modifierFailed))),"function"==typeof e.userCallback&&e.userCallback.call(e.dom.container,e.state,e),"function"==typeof e.userDeferred.resolve&&e.userDeferred.resolve(e.state),e.userCallback=null,e.userDeferred=null,e.lastClicked=null,e.isToggling=!1,e.isBusy=!1,e.queue.length&&(e.callActions("beforeReadQueueCleanUp",arguments),a=e.queue.shift(),e.userDeferred=a.deferred,e.isToggling=a.isToggling,e.lastClicked=a.triggerElement,a.instruction.command instanceof h.CommandMultimix?e.multimix.apply(e,a.args):e.dataset.apply(e,a.args)),e.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e=this,n=new h.UserInstruction,o=null,i=-1;for(n.animate=e.config.animation.enable,n.command=new h.CommandMultimix,i=0;i<t.length;i++)null!==(o=t[i])&&("object"==typeof o?p.extend(n.command,o):"boolean"==typeof o?n.animate=o:"function"==typeof o&&(n.callback=o));return!n.command.insert||n.command.insert instanceof h.CommandInsert||(n.command.insert=e.parseInsertArgs([n.command.insert]).command),!n.command.remove||n.command.remove instanceof h.CommandRemove||(n.command.remove=e.parseRemoveArgs([n.command.remove]).command),!n.command.filter||n.command.filter instanceof h.CommandFilter||(n.command.filter=e.parseFilterArgs([n.command.filter]).command),!n.command.sort||n.command.sort instanceof h.CommandSort||(n.command.sort=e.parseSortArgs([n.command.sort]).command),!n.command.changeLayout||n.command.changeLayout instanceof h.CommandChangeLayout||(n.command.changeLayout=e.parseChangeLayoutArgs([n.command.changeLayout]).command),n=e.callFilters("instructionParseMultimixArgs",n,arguments),p.freeze(n),n},parseFilterArgs:function(t){var e=new h.UserInstruction,n=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new h.CommandFilter,o=0;o<t.length;o++)"string"==typeof(n=t[o])?e.command.selector=n:null===n?e.command.collection=[]:"object"==typeof n&&p.isElement(n,this.dom.document)?e.command.collection=[n]:"object"==typeof n&&void 0!==n.length?e.command.collection=p.arrayFromList(n):"object"==typeof n?p.extend(e.command,n):"boolean"==typeof n?e.animate=n:"function"==typeof n&&(e.callback=n);if(e.command.selector&&e.command.collection)throw new Error(h.messages.errorFilterInvalidArguments());return e=this.callFilters("instructionParseFilterArgs",e,arguments),p.freeze(e),e},parseSortArgs:function(t){var e=new h.UserInstruction,n=null,o="",i=-1;for(e.animate=this.config.animation.enable,e.command=new h.CommandSort,i=0;i<t.length;i++)if(null!==(n=t[i]))switch(typeof n){case"string":o=n;break;case"object":n.length&&(e.command.collection=p.arrayFromList(n));break;case"boolean":e.animate=n;break;case"function":e.callback=n}return o&&(e.command=this.parseSortString(o,e.command)),e=this.callFilters("instructionParseSortArgs",e,arguments),p.freeze(e),e},parseInsertArgs:function(t){var e=new h.UserInstruction,n=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new h.CommandInsert,o=0;o<t.length;o++)null!==(n=t[o])&&("number"==typeof n?e.command.index=n:"string"==typeof n&&-1<["before","after"].indexOf(n)?e.command.position=n:"string"==typeof n?e.command.collection=p.arrayFromList(p.createElement(n).childNodes):"object"==typeof n&&p.isElement(n,this.dom.document)?e.command.collection.length?e.command.sibling=n:e.command.collection=[n]:"object"==typeof n&&n.length?e.command.collection.length?e.command.sibling=n[0]:e.command.collection=n:"object"==typeof n&&n.childNodes&&n.childNodes.length?e.command.collection.length?e.command.sibling=n.childNodes[0]:e.command.collection=p.arrayFromList(n.childNodes):"object"==typeof n?p.extend(e.command,n):"boolean"==typeof n?e.animate=n:"function"==typeof n&&(e.callback=n));if(e.command.index&&e.command.sibling)throw new Error(h.messages.errorInsertInvalidArguments());return!e.command.collection.length&&this.config.debug.showWarnings&&console.warn(h.messages.warningInsertNoElements()),e=this.callFilters("instructionParseInsertArgs",e,arguments),p.freeze(e),e},parseRemoveArgs:function(t){var e=this,n=new h.UserInstruction,o=null,i=null,a=-1;for(n.animate=e.config.animation.enable,n.command=new h.CommandRemove,a=0;a<t.length;a++)if(null!==(i=t[a]))switch(typeof i){case"number":e.targets[i]&&(n.command.targets[0]=e.targets[i]);break;case"string":n.command.collection=p.arrayFromList(e.dom.parent.querySelectorAll(i));break;case"object":i&&i.length?n.command.collection=i:p.isElement(i,e.dom.document)?n.command.collection=[i]:p.extend(n.command,i);break;case"boolean":n.animate=i;break;case"function":n.callback=i}if(n.command.collection.length)for(a=0;o=e.targets[a];a++)-1<n.command.collection.indexOf(o.dom.el)&&n.command.targets.push(o);return!n.command.targets.length&&e.config.debug.showWarnings&&console.warn(h.messages.warningRemoveNoElements()),p.freeze(n),n},parseDatasetArgs:function(t){var e=new h.UserInstruction,n=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new h.CommandDataset,o=0;o<t.length;o++)if(null!==(n=t[o]))switch(typeof n){case"object":Array.isArray(n)||"number"==typeof n.length?e.command.dataset=n:p.extend(e.command,n);break;case"boolean":e.animate=n;break;case"function":e.callback=n}return p.freeze(e),e},parseChangeLayoutArgs:function(t){var e=new h.UserInstruction,n=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new h.CommandChangeLayout,o=0;o<t.length;o++)if(null!==(n=t[o]))switch(typeof n){case"string":e.command.containerClassName=n;break;case"object":p.extend(e.command,n);break;case"boolean":e.animate=n;break;case"function":e.callback=n}return p.freeze(e),e},queueMix:function(t){var e=this,n=null,o="";return e.callActions("beforeQueueMix",arguments),n=p.defer(h.libraries),e.config.animation.queue&&e.queue.length<e.config.animation.queueLimit?(t.deferred=n,e.queue.push(t),e.config.controls.enable&&(e.isToggling?(e.buildToggleArray(t.instruction.command),o=e.getToggleSelector(),e.updateControls({filter:{selector:o}})):e.updateControls(t.instruction.command))):(e.config.debug.showWarnings&&console.warn(h.messages.warningMultimixInstanceQueueFull()),n.resolve(e.state),h.events.fire("mixBusy",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixBusy&&e.config.callbacks.onMixBusy.call(e.dom.container,e.state,e)),e.callFilters("promiseQueueMix",n.promise,arguments)},getDataOperation:function(t){var e=this,n=new h.Operation,o=[];if(n=e.callFilters("operationUnmappedGetDataOperation",n,arguments),e.dom.targets.length&&!(o=e.state.activeDataset||[]).length)throw new Error(h.messages.errorDatasetNotSet());return n.id=p.randomHex(),n.startState=e.state,n.startDataset=o,n.newDataset=t.slice(),e.diffDatasets(n),n.startOrder=e.targets,n.newOrder=n.show,e.config.animation.enable&&(e.getStartMixData(n),e.setInter(n),n.docState=p.getDocumentState(e.dom.document),e.getInterMixData(n),e.setFinal(n),e.getFinalMixData(n),e.parseEffects(),n.hasEffect=e.hasEffect(),e.getTweenData(n)),e.targets=n.show.slice(),n.newState=e.buildState(n),Array.prototype.push.apply(e.targets,n.toRemove),n=e.callFilters("operationMappedGetDataOperation",n,arguments)},diffDatasets:function(t){var e=this,n=[],o=[],i=[],a=null,r=null,s=null,l=null,c=null,u={},d="",f=-1;for(e.callActions("beforeDiffDatasets",arguments),f=0;a=t.newDataset[f];f++){if(void 0===(d=a[e.config.data.uidKey])||d.toString().length<1)throw new TypeError(h.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(u[d])throw new Error(h.messages.errorDatasetDuplicateUid({uid:d}));u[d]=!0,(r=e.cache[d])instanceof h.Target?(e.config.data.dirtyCheck&&!p.deepEquals(a,r.data)&&(s=r.render(a),r.data=a,s!==r.dom.el&&(r.isInDom&&(r.unbindEvents(),e.dom.parent.replaceChild(s,r.dom.el)),r.isShown||(s.style.display="none"),r.dom.el=s,r.isInDom&&r.bindEvents())),s=r.dom.el):((r=new h.Target).init(null,e,a),r.hide()),r.isInDom?(c=r.dom.el.nextElementSibling,o.push(d),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,r.dom.el,i),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(r.dom.el),r.isInDom=!0,r.unbindEvents(),r.bindEvents(),r.hide(),t.toShow.push(r),i.push(r)),t.show.push(r)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,i)),f=0;a=t.startDataset[f];f++)d=a[e.config.data.uidKey],r=e.cache[d],t.show.indexOf(r)<0?(t.hide.push(r),t.toHide.push(r),t.toRemove.push(r)):n.push(d);p.isEqualArray(n,o)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,n){var o=e?p.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);n.length;)this.targets.splice(o,0,n.shift()),o++},willSort:function(t,e){var n=!1;return n=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next),this.callFilters("resultWillSort",n,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t,e=this,n=e.parseFilterArgs(arguments),o=n.command.selector;return e.isToggling=!0,e.toggleArray.indexOf(o)<0&&e.toggleArray.push(o),t=e.getToggleSelector(),e.multimix({filter:t},n.animate,n.callback)},toggleOff:function(){var t,e=this,n=e.parseFilterArgs(arguments),o=n.command.selector,i=e.toggleArray.indexOf(o);return e.isToggling=!0,-1<i&&e.toggleArray.splice(i,1),t=e.getToggleSelector(),e.multimix({filter:t},n.animate,n.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),n=null,o=null,i=!1;return t.callActions("beforeDataset",arguments),t.isBusy?((o=new h.QueueItem).args=arguments,o.instruction=e,t.queueMix(o)):(e.callback&&(t.userCallback=e.callback),i=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,n=t.getDataOperation(e.command.dataset),t.goMix(i,n))},multimix:function(){var t=this,e=null,n=!1,o=null,i=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((o=new h.QueueItem).args=arguments,o.instruction=i,o.triggerElement=t.lastClicked,o.isToggling=t.isToggling,t.queueMix(o)):(e=t.getOperation(i.command),t.config.controls.enable&&(i.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1&&t.updateControls(e.command)),i.callback&&(t.userCallback=i.callback),n=i.animate^t.config.animation.enable?i.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(n,e))},getOperation:function(t){var e=this,n=t.sort,o=t.filter,i=t.changeLayout,a=t.remove,r=t.insert,s=new h.Operation;return(s=e.callFilters("operationUnmappedGetOperation",s,arguments)).id=p.randomHex(),s.command=t,s.startState=e.state,s.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(h.messages.warningGetOperationInstanceBusy()),null):(r&&e.insertTargets(r,s),a&&(s.toRemove=a.targets),s.startSort=s.newSort=s.startState.activeSort,s.startOrder=s.newOrder=e.targets,n&&(s.startSort=s.startState.activeSort,s.newSort=n,s.willSort=e.willSort(n,s.startState.activeSort),s.willSort&&e.sortOperation(s)),s.startFilter=s.startState.activeFilter,s.newFilter=o||p.extend(new h.CommandFilter,s.startFilter),"all"===s.newFilter.selector?s.newFilter.selector=e.config.selectors.target:"none"===s.newFilter.selector&&(s.newFilter.selector=""),e.filterOperation(s),s.startContainerClassName=s.startState.activeContainerClassName,i?(s.newContainerClassName=i.containerClassName,s.newContainerClassName!==s.startContainerClassName&&(s.willChangeLayout=!0)):s.newContainerClassName=s.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(s),e.setInter(s),s.docState=p.getDocumentState(e.dom.document),e.getInterMixData(s),e.setFinal(s),e.getFinalMixData(s),e.parseEffects(),s.hasEffect=e.hasEffect(),e.getTweenData(s)),s.willSort&&(e.targets=s.newOrder),s.newState=e.buildState(s),e.callFilters("operationMappedGetOperation",s,arguments))},tween:function(t,e){var n=null,o=null,i=-1,a=-1;for(e=Math.min(e,1),e=Math.max(e,0),a=0;n=t.show[a];a++)o=t.showPosData[a],n.applyTween(o,e);for(a=0;n=t.hide[a];a++)n.isShown&&n.hide(),-1<(i=t.toHide.indexOf(n))&&(o=t.toHidePosData[i],n.isShown||n.show(),n.applyTween(o,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null;return e=t?p.getProperty(this.config,t):this.config,this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),p.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t;return t=new h.State,p.extend(t,this.state),p.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,n=null,o="";for(o in t.cache)(n=(e=t.cache[o]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(n,e.dom.el)),e.isShown||(n.style.display="none"),e.dom.el=n,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,n=null,o=null,i=0;for(e.callActions("beforeDestroy",arguments),i=0;n=e.controls[i];i++)n.removeBinding(e);for(i=0;o=e.targets[i];i++)t&&o.show(),o.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete h.instances[e.id],e.callActions("afterDestroy",arguments)}}),h.IMoveData=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.IMoveData),h.IMoveData.prototype=Object.create(h.Base.prototype),h.IMoveData.prototype.constructor=h.IMoveData,h.TargetDom=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.TargetDom),h.TargetDom.prototype=Object.create(h.Base.prototype),h.TargetDom.prototype.constructor=h.TargetDom,h.Target=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new h.TargetDom,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.Target),h.Target.prototype=Object.create(h.Base.prototype),p.extend(h.Target.prototype,{constructor:h.Target,init:function(t,e,n){var o=this,i="";if(o.callActions("beforeInit",arguments),o.mixer=e,t=t||o.render(n),o.cacheDom(t),o.bindEvents(),"none"!==o.dom.el.style.display&&(o.isShown=!0),n&&e.config.data.uidKey){if(void 0===(i=n[e.config.data.uidKey])||i.toString().length<1)throw new TypeError(h.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));o.id=i,o.data=n,e.cache[i]=o}o.callActions("afterInit",arguments)},render:function(t){var e,n=null,o=null,i=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(n=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(h.messages.errorDatasetRendererNotSet());return(e=n(t))&&"object"==typeof e&&p.isElement(e)?o=e:"string"==typeof e&&((i=document.createElement("div")).innerHTML=e,o=i.firstElementChild),this.callFilters("elRender",o,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){var e=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),e=isNaN(+e)?e.toLowerCase():+e,this.sortString=e,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var n=this,o="",i=null,a=t.posIn,r=[],s=new h.StyleData,l=-1;for(n.callActions("beforeApplyTween",arguments),s.x=a.x,s.y=a.y,0===e?n.hide():n.isShown||n.show(),l=0;o=h.features.TWEENABLE[l];l++)if(i=t.tweenData[o],"x"===o){if(!i)continue;s.x=a.x+i*e}else if("y"===o){if(!i)continue;s.y=a.y+i*e}else if(i instanceof h.TransformData){if(!i.value)continue;s[o].value=a[o].value+i.value*e,s[o].unit=i.unit,r.push(o+"("+s[o].value+i.unit+")")}else{if(!i)continue;s[o]=a[o]+i*e,n.dom.el.style[o]=s[o]}(s.x||s.y)&&r.unshift("translate("+s.x+"px, "+s.y+"px)"),r.length&&(n.dom.el.style[h.features.transformProp]=r.join(" ")),n.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,n=t.posIn,o=1!==e.mixer.effectsIn.opacity,i=[];e.callActions("beforeApplyStylesIn",arguments),i.push("translate("+n.x+"px, "+n.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=n.width+"px",e.dom.el.style.height=n.height+"px"),e.dom.el.style.marginRight=n.marginRight+"px",e.dom.el.style.marginBottom=n.marginBottom+"px"),o&&(e.dom.el.style.opacity=n.opacity),"show"===t.statusChange&&(i=i.concat(e.mixer.transformIn)),e.dom.el.style[h.features.transformProp]=i.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,n=[],o=[],i=e.mixer.config.animation.animateResizeTargets,a=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),n.push(e.writeTransitionRule(h.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&n.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),i&&(n.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return e.mixer.targetsImmovable++,void(e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation));switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(n),i&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||o.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":a&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),o=o.concat(e.mixer.transformOut);break;case"show":a&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&o.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[h.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,n){var o,i=this.getDelay(e);return o=t+" "+(0<n?n:this.mixer.config.animation.duration)+"ms "+i+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing),this.callFilters("ruleWriteTransitionRule",o,arguments)},getDelay:function(t){var e,n=this;return"function"==typeof n.mixer.config.animation.staggerSequence&&(t=n.mixer.config.animation.staggerSequence.call(n,t,n.state)),e=n.mixer.staggerDuration?t*n.mixer.staggerDuration:0,n.callFilters("delayGetDelay",e,arguments)},applyTransition:function(t){var e=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[h.features.transitionProp]=e,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,n=t.propertyName,o=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<n.indexOf("transform")||-1<n.indexOf("opacity")||o&&-1<n.indexOf("height")||o&&-1<n.indexOf("width")||o&&-1<n.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),p.off(t.dom.el,"webkitTransitionEnd",t.handler),p.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===h.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},p.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,n={},o=null,i=new h.StyleData;return e.callActions("beforeGetPosData",arguments),i.x=e.dom.el.offsetLeft,i.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(o=e.dom.el.getBoundingClientRect(),i.top=o.top,i.right=o.right,i.bottom=o.bottom,i.left=o.left,i.width=o.width,i.height=o.height),e.mixer.config.animation.animateResizeTargets&&(n=f.getComputedStyle(e.dom.el),i.marginBottom=parseFloat(n.marginBottom),i.marginRight=parseFloat(n.marginRight)),e.callFilters("posDataGetPosData",i,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[h.features.transformProp]="",t.dom.el.style[h.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),h.Collection=function(t){var e=null,n=-1;for(this.callActions("beforeConstruct"),n=0;e=t[n];n++)this[n]=e;this.length=t.length,this.callActions("afterConstruct"),p.freeze(this)},h.BaseStatic.call(h.Collection),h.Collection.prototype=Object.create(h.Base.prototype),p.extend(h.Collection.prototype,{constructor:h.Collection,mixitup:function(t){var e=null,n=Array.prototype.slice.call(arguments),o=[],i=-1;for(this.callActions("beforeMixitup"),n.shift(),i=0;e=this[i];i++)o.push(e[t].apply(e,n));return this.callFilters("promiseMixitup",p.all(o,h.libraries),arguments)}}),h.Operation=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.Operation),h.Operation.prototype=Object.create(h.Base.prototype),h.Operation.prototype.constructor=h.Operation,h.State=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.State),h.State.prototype=Object.create(h.Base.prototype),h.State.prototype.constructor=h.State,h.UserInstruction=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),p.seal(this)},h.BaseStatic.call(h.UserInstruction),h.UserInstruction.prototype=Object.create(h.Base.prototype),h.UserInstruction.prototype.constructor=h.UserInstruction,h.Messages=function(){h.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),p.seal(this)},h.BaseStatic.call(h.Messages),h.Messages.prototype=Object.create(h.Base.prototype),h.Messages.prototype.constructor=h.Messages,h.Messages.prototype.compileTemplates=function(){var t="",e="";for(t in this)"string"==typeof(e=this[t])&&(this[p.camelCase(t)]=p.template(e))},h.messages=new h.Messages,h.Facade=function(t){h.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),p.freeze(this),p.seal(this)},h.BaseStatic.call(h.Facade),h.Facade.prototype=Object.create(h.Base.prototype),h.Facade.prototype.constructor=h.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=h:"function"==typeof define&&define.amd?define(function(){return h}):void 0!==f.mixitup&&"function"==typeof f.mixitup||(f.mixitup=h),h.BaseStatic.call(h.constructor),h.NAME="mixitup",h.CORE_VERSION="3.3.1"}(window),function(l,d,g,m){"use strict";if(l.console=l.console||{info:function(t){}},g)if(g.fn.fancybox)console.info("fancyBox already initialized");else{var t,e,n,o,i={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:g.noop,beforeLoad:g.noop,afterLoad:g.noop,beforeShow:g.noop,afterShow:g.noop,beforeClose:g.noop,afterClose:g.noop,onActivate:g.noop,onDeactivate:g.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},a=g(l),r=g(d),s=0,f=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},c=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},u=function(){var t,e=d.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in n)if(e.style[t]!==m)return n[t];return"transitionend"}(),h=function(t){return t&&t.length&&t[0].offsetHeight},p=function(t,e){var n=g.extend(!0,{},t,e);return g.each(e,function(t,e){g.isArray(e)&&(n[t]=e)}),n},v=function(t,e,n){var o=this;o.opts=p({index:n},g.fancybox.defaults),g.isPlainObject(e)&&(o.opts=p(o.opts,e)),g.fancybox.isMobile&&(o.opts=p(o.opts,o.opts.mobile)),o.id=o.opts.id||++s,o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=!0,o.group=[],o.slides={},o.addContent(t),o.group.length&&o.init()};g.extend(v.prototype,{init:function(){var e,n,o=this,i=o.group[o.currIndex].opts;i.closeExisting&&g.fancybox.close(!0),g("body").addClass("fancybox-active"),!g.fancybox.getInstance()&&!1!==i.hideScrollbar&&!g.fancybox.isMobile&&d.body.scrollHeight>l.innerHeight&&(g("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-d.documentElement.clientWidth)+"px;}</style>"),g("body").addClass("compensate-for-scrollbar")),n="",g.each(i.buttons,function(t,e){n+=i.btnTpl[e]||""}),e=g(o.translate(o,i.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",i.btnTpl.arrowLeft+i.btnTpl.arrowRight))).attr("id","fancybox-container-"+o.id).addClass(i.baseClass).data("FancyBox",o).appendTo(i.parentEl),o.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){o.$refs[t]=e.find(".fancybox-"+t)}),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return n[e]===m?t:n[e]})},addContent:function(t){var e,c=this,n=g.makeArray(t);g.each(n,function(t,e){var n,o,i,a,r,s={},l={};g.isPlainObject(e)?l=(s=e).opts||e:"object"===g.type(e)&&g(e).length?(l=(n=g(e)).data()||{},(l=g.extend(!0,{},l,l.options)).$orig=n,s.src=c.opts.src||l.src||n.attr("href"),s.type||s.src||(s.type="inline",s.src=e)):s={type:"html",src:e+""},s.opts=g.extend(!0,{},c.opts,l),g.isArray(l.buttons)&&(s.opts.buttons=l.buttons),g.fancybox.isMobile&&s.opts.mobile&&(s.opts=p(s.opts,s.opts.mobile)),o=s.type||s.opts.type,a=s.src||"",!o&&a&&((i=a.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(o="video",s.opts.video.format||(s.opts.video.format="video/"+("ogv"===i[1]?"ogg":i[1]))):a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":a.match(/\.(pdf)((\?|#).*)?$/i)?(o="iframe",s=g.extend(!0,s,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===a.charAt(0)&&(o="inline")),o?s.type=o:c.trigger("objectNeedsType",s),s.contentType||(s.contentType=-1<g.inArray(s.type,["html","inline","ajax"])?"html":s.type),s.index=c.group.length,"auto"==s.opts.smallBtn&&(s.opts.smallBtn=-1<g.inArray(s.type,["html","inline","ajax"])),"auto"===s.opts.toolbar&&(s.opts.toolbar=!s.opts.smallBtn),s.$thumb=s.opts.$thumb||null,s.opts.$trigger&&s.index===c.opts.index&&(s.$thumb=s.opts.$trigger.find("img:first"),s.$thumb.length&&(s.opts.$orig=s.opts.$trigger)),s.$thumb&&s.$thumb.length||!s.opts.$orig||(s.$thumb=s.opts.$orig.find("img:first")),s.$thumb&&!s.$thumb.length&&(s.$thumb=null),s.thumb=s.opts.thumb||(s.$thumb?s.$thumb[0].src:null),"function"===g.type(s.opts.caption)&&(s.opts.caption=s.opts.caption.apply(e,[c,s])),"function"===g.type(c.opts.caption)&&(s.opts.caption=c.opts.caption.apply(e,[c,s])),s.opts.caption instanceof g||(s.opts.caption=s.opts.caption===m?"":s.opts.caption+""),"ajax"===s.type&&1<(r=a.split(/\s+/,2)).length&&(s.src=r.shift(),s.opts.filter=r.shift()),s.opts.modal&&(s.opts=g.extend(!0,s.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(s)}),Object.keys(c.slides).length&&(c.updateControls(),(e=c.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),o.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),o.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),o.next()}).on("click.fb","[data-fancybox-zoom]",function(t){o[o.isScaledDown()?"scaleToActual":"scaleToFit"]()}),a.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(o.requestId&&c(o.requestId),o.requestId=f(function(){o.update(t)})):(o.current&&"iframe"===o.current.type&&o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update(t)},g.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(t){var e=(g.fancybox?g.fancybox.getInstance():null).current,n=t.keyCode||t.which;if(9!=n){if(!(!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||g(t.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(t.preventDefault(),void o.close(t)):37===n||38===n?(t.preventDefault(),void o.previous()):39===n||40===n?(t.preventDefault(),void o.next()):void o.trigger("afterKeydown",t,n)}else e.opts.trapFocus&&o.focus(t)}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=l.setInterval(function(){o.idleSecondsCounter++,o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&!o.isDragging&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){a.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,o){var e,n,i,a,r,s,l,c,u,d=this,f=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(t=parseInt(t,10),!(i=d.current?d.current.opts.loop:d.opts.loop)&&(t<0||f<=t))return!1;if(e=d.firstRun=!Object.keys(d.slides).length,r=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,a=d.createSlide(t),1<f&&((i||a.index<f-1)&&d.createSlide(t+1),(i||0<a.index)&&d.createSlide(t-1)),d.current=a,d.currIndex=a.index,d.currPos=a.pos,d.trigger("beforeShow",e),d.updateControls(),a.forcedDuration=m,g.isNumeric(o)?a.forcedDuration=o:o=a.opts[e?"animationDuration":"transitionDuration"],o=parseInt(o,10),n=d.isMoved(a),a.$slide.addClass("fancybox-slide--current"),e)return a.opts.animationEffect&&o&&d.$refs.container.css("transition-duration",o+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(a),void d.preload("image");s=g.fancybox.getTranslate(r.$slide),l=g.fancybox.getTranslate(d.$refs.stage),g.each(d.slides,function(t,e){g.fancybox.stop(e.$slide,!0)}),r.pos!==a.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),n?(u=s.left-(r.pos*s.width+r.pos*r.opts.gutter),g.each(d.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=e.pos*s.width+e.pos*e.opts.gutter;g.fancybox.setTranslate(e.$slide,{top:0,left:n-l.left+u}),e.pos!==a.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>a.pos?"next":"previous")),h(e.$slide),g.fancybox.animate(e.$slide,{top:0,left:(e.pos-a.pos)*s.width+(e.pos-a.pos)*e.opts.gutter},o,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===d.currPos&&d.complete()})})):o&&a.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+a.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>a.pos?"next":"previous")),g.fancybox.animate(r.$slide,c,o,function(){r.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),a.isLoaded?d.revealContent(a):d.loadSlide(a),d.preload("image")}},createSlide:function(t){var e,n,o=this;return n=(n=t%o.group.length)<0?o.group.length+n:n,!o.slides[t]&&o.group[n]&&(e=g('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[t]=g.extend(!0,{},o.group[n],{pos:t,$slide:e,isLoaded:!1}),o.updateSlide(o.slides[t])),o.slides[t]},scaleToActual:function(t,e,n){var o,i,a,r,s,l=this,c=l.current,u=c.$content,d=g.fancybox.getTranslate(c.$slide).width,f=g.fancybox.getTranslate(c.$slide).height,h=c.width,p=c.height;l.isAnimating||l.isMoved()||!u||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,g.fancybox.stop(u),t=t===m?.5*d:t,e=e===m?.5*f:e,(o=g.fancybox.getTranslate(u)).top-=g.fancybox.getTranslate(c.$slide).top,o.left-=g.fancybox.getTranslate(c.$slide).left,r=h/o.width,s=p/o.height,i=.5*d-.5*h,a=.5*f-.5*p,d<h&&(0<(i=o.left*r-(t*r-t))&&(i=0),i<d-h&&(i=d-h)),f<p&&(0<(a=o.top*s-(e*s-e))&&(a=0),a<f-p&&(a=f-p)),l.updateCursor(h,p),g.fancybox.animate(u,{top:a,left:i,scaleX:r,scaleY:s},n||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(t){var e,n=this,o=n.current,i=o.$content;n.isAnimating||n.isMoved()||!i||"image"!=o.type||!o.isLoaded||o.hasError||(n.isAnimating=!0,g.fancybox.stop(i),e=n.getFitPos(o),n.updateCursor(e.width,e.height),g.fancybox.animate(i,{top:e.top,left:e.left,scaleX:e.width/i.width(),scaleY:e.height/i.height()},t||366,function(){n.isAnimating=!1}))},getFitPos:function(t){var e,n,o,i,a=t.$content,r=t.$slide,s=t.width||t.opts.width,l=t.height||t.opts.height,c={};return!!(t.isLoaded&&a&&a.length)&&(e=g.fancybox.getTranslate(this.$refs.stage).width,n=g.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(a.css("marginLeft"))+parseFloat(a.css("marginRight")),n-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(a.css("marginTop"))+parseFloat(a.css("marginBottom")),s&&l||(s=e,l=n),e-.5<(s*=o=Math.min(1,e/s,n/l))&&(s=e),n-.5<(l*=o)&&(l=n),"image"===t.type?(c.top=Math.floor(.5*(n-l))+parseFloat(r.css("paddingTop")),c.left=Math.floor(.5*(e-s))+parseFloat(r.css("paddingLeft"))):"video"===t.contentType&&(s/(i=t.opts.width&&t.opts.height?s/l:t.opts.ratio||16/9)<l?l=s/i:l*i<s&&(s=l*i)),c.width=s,c.height=l,c)},update:function(n){var o=this;g.each(o.slides,function(t,e){o.updateSlide(e,n)})},updateSlide:function(t,e){var n=this,o=t&&t.$content,i=t.width||t.opts.width,a=t.height||t.opts.height,r=t.$slide;n.adjustCaption(t),o&&(i||a||"video"===t.contentType)&&!t.hasError&&(g.fancybox.stop(o),g.fancybox.setTranslate(o,n.getFitPos(t)),t.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),n.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,n=e.current,o=n.$slide;!e.isClosing&&n&&(o.siblings().css({transform:"",opacity:""}),o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),g.fancybox.animate(o,{top:0,left:0,opacity:1},t===m?0:t,function(){o.css({transform:"",opacity:""}),n.isComplete||e.complete()},!1))},isMoved:function(t){var e,n,o=t||this.current;return!!o&&(n=g.fancybox.getTranslate(this.$refs.stage),e=g.fancybox.getTranslate(o.$slide),!o.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-n.top)||.5<Math.abs(e.left-n.left)))},updateCursor:function(t,e){var n,o,i=this,a=i.current,r=i.$refs.container;a&&!i.isClosing&&i.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=!!(n=i.canPan(t,e))||i.isZoomable(),r.toggleClass("fancybox-is-zoomable",o),g("[data-fancybox-zoom]").prop("disabled",!o),n?r.addClass("fancybox-can-pan"):o&&("zoom"===a.opts.clickContent||g.isFunction(a.opts.clickContent)&&"zoom"==a.opts.clickContent(a))?r.addClass("fancybox-can-zoomIn"):a.opts.touch&&(a.opts.touch.vertical||1<i.group.length)&&"video"!==a.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var n=!1,o=this.current,i=o.$content;return t!==m&&e!==m?n=t<o.width&&e<o.height:i&&(n=(n=g.fancybox.getTranslate(i)).width<o.width&&n.height<o.height),n},canPan:function(t,e){var n=this.current,o=null,i=!1;return"image"===n.type&&(n.isComplete||t&&e)&&!n.hasError&&(i=this.getFitPos(n),t!==m&&e!==m?o={width:t,height:e}:n.isComplete&&(o=g.fancybox.getTranslate(n.$content)),o&&i&&(i=1.5<Math.abs(o.width-i.width)||1.5<Math.abs(o.height-i.height))),i},loadSlide:function(n){var t,e,o,i=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===i.trigger("beforeLoad",n))return n.isLoading=!1;switch(t=n.type,(e=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),t){case"image":i.setImage(n);break;case"iframe":i.setIframe(n);break;case"html":i.setContent(n,n.src||n.content);break;case"video":i.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":g(n.src).length?i.setContent(n,g(n.src)):i.setError(n);break;case"ajax":i.showLoading(n),o=g.ajax(g.extend({},n.opts.ajax.settings,{url:n.src,success:function(t,e){"success"===e&&i.setContent(n,t)},error:function(t,e){t&&"abort"!==e&&i.setError(n)}})),e.one("onReset",function(){o.abort()});break;default:i.setError(n)}return!0}},setImage:function(e){var t,n=this;setTimeout(function(){var t=e.$image;n.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||n.showLoading(e)},50),n.checkSrcset(e),e.$content=g('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=d.createElement("img")).onerror=function(){g(this).remove(),e.$ghost=null},t.onload=function(){n.afterLoad(e)},e.$ghost=g(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),n.setBigImage(e)},checkSrcset:function(t){var e,n,o,i,a=t.opts.srcset||t.opts.image.srcset;if(a){o=l.devicePixelRatio||1,i=l.innerWidth*o,(n=a.split(",").map(function(t){var o={};return t.trim().split(/\s+/).forEach(function(t,e){var n=parseInt(t.substring(0,t.length-1),10);if(0===e)return o.url=t;n&&(o.value=n,o.postfix=t[t.length-1])}),o})).sort(function(t,e){return t.value-e.value});for(var r=0;r<n.length;r++){var s=n[r];if("w"===s.postfix&&s.value>=i||"x"===s.postfix&&s.value>=o){e=s;break}}!e&&n.length&&(e=n[n.length-1]),e&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=a)}},setBigImage:function(e){var n=this,t=d.createElement("img"),o=g(t);e.$image=o.one("error",function(){n.setError(e)}).one("load",function(){var t;e.$ghost||(n.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),n.afterLoad(e)),n.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<a.width()/a.height()?"100":Math.round(e.width/e.height*100))+"vw"),o.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!n.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),n.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&o.naturalWidth&&o.naturalHeight?o.trigger("load"):t.error&&o.trigger("error")},resolveImageSlideSize:function(t,e,n){var o=parseInt(t.opts.width,10),i=parseInt(t.opts.height,10);t.width=e,t.height=n,0<o&&(t.width=o,t.height=Math.floor(o*n/e)),0<i&&(t.width=Math.floor(i*e/n),t.height=i)},setIframe:function(i){var a,e=this,r=i.opts.iframe,s=i.$slide;i.$content=g('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(s),s.addClass("fancybox-slide--"+i.contentType),i.$iframe=a=g(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(i.$content),r.preload?(e.showLoading(i),a.on("load.fb error.fb",function(t){this.isReady=1,i.$slide.trigger("refresh"),e.afterLoad(i)}),s.on("refresh.fb",function(){var t,e=i.$content,n=r.css.width,o=r.css.height;if(1===a[0].isReady){try{t=a.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(s.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),n===m&&(n=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",n||"").css("max-width",""),o===m&&(o=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",o||""),s.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(i),a.attr("src",i.src),s.one("onReset",function(){try{g(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}g(this).off("refresh.fb").empty(),i.isLoaded=!1,i.isRevealed=!1})},setContent:function(t,e){var n;this.isClosing||(this.hideLoading(t),t.$content&&g.fancybox.stop(t.$content),t.$slide.empty(),(n=e)&&n.hasOwnProperty&&n instanceof g&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=g("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===g.type(e)&&(e=g("<div>").append(g.trim(e)).contents()),t.opts.filter&&(e=g("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){g(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(g(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),g(e).appendTo(t.$slide),g(e).is("video,audio")&&(g(e).addClass("fancybox-video"),g(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||g(e).attr("width"),t.opts.height=t.opts.height||g(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=g(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=g(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&g('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e,n=this,o=t||n.current,i=o.opts.caption,a=o.opts.preventCaptionOverlap,r=n.$refs.caption,s=!1;r.toggleClass("fancybox-caption--separate",a),a&&i&&i.length&&(o.pos!==n.currPos?((e=r.clone().appendTo(r.parent())).children().eq(0).empty().html(i),s=e.outerHeight(!0),e.empty().remove()):n.$caption&&(s=n.$caption.outerHeight(!0)),o.$slide.css("padding-bottom",s||""))},adjustLayout:function(t){var e,n,o,i,a=t||this.current;a.isLoaded&&!0!==a.opts.disableLayoutFix&&(a.$content.css("margin-bottom",""),a.$content.outerHeight()>a.$slide.height()+.5&&(o=a.$slide[0].style["padding-bottom"],i=a.$slide.css("padding-bottom"),0<parseFloat(i)&&(e=a.$slide[0].scrollHeight,a.$slide.css("padding-bottom",0),Math.abs(e-a.$slide[0].scrollHeight)<1&&(n=i),a.$slide.css("padding-bottom",o))),a.$content.css("margin-bottom",n))},revealContent:function(t){var e,n,o,i,a=this,r=t.$slide,s=!1,l=!1,c=a.isMoved(t),u=t.isRevealed;return t.isRevealed=!0,e=t.opts[a.firstRun?"animationEffect":"transitionEffect"],o=t.opts[a.firstRun?"animationDuration":"transitionDuration"],o=parseInt(t.forcedDuration===m?o:t.forcedDuration,10),!c&&t.pos===a.currPos&&o||(e=!1),"zoom"===e&&(t.pos===a.currPos&&o&&"image"===t.type&&!t.hasError&&(l=a.getThumbPos(t))?s=a.getFitPos(t):e="fade"),"zoom"===e?(a.isAnimating=!0,s.scaleX=s.width/l.width,s.scaleY=s.height/l.height,"auto"==(i=t.opts.zoomOpacity)&&(i=.1<Math.abs(t.width/t.height-l.width/l.height)),i&&(l.opacity=.1,s.opacity=1),g.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),h(t.$content),void g.fancybox.animate(t.$content,s,o,function(){a.isAnimating=!1,a.complete()})):(a.updateSlide(t),e?(g.fancybox.stop(r),n="fancybox-slide--"+(t.pos>=a.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(n).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),h(r),"image"!==t.type&&t.$content.hide().show(0),void g.fancybox.animate(r,"fancybox-slide--current",o,function(){r.removeClass(n).css({transform:"",opacity:""}),t.pos===a.currPos&&a.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),u||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===a.currPos&&a.complete())))},getThumbPos:function(t){var e,n,o,i,a,r,s,l,c,u=t.$thumb;return!!(u&&(s=u[0])&&s.ownerDocument===d&&(g(".fancybox-container").css("pointer-events","none"),l={x:s.getBoundingClientRect().left+s.offsetWidth/2,y:s.getBoundingClientRect().top+s.offsetHeight/2},c=d.elementFromPoint(l.x,l.y)===s,g(".fancybox-container").css("pointer-events",""),c))&&(n=g.fancybox.getTranslate(u),o=parseFloat(u.css("border-top-width")||0),i=parseFloat(u.css("border-right-width")||0),a=parseFloat(u.css("border-bottom-width")||0),r=parseFloat(u.css("border-left-width")||0),e={top:n.top+o,left:n.left+r,width:n.width-i-r,height:n.height-o-a,scaleX:1,scaleY:1},0<n.width&&0<n.height&&e)},complete:function(){var t,n=this,e=n.current,o={};!n.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),n.preload("inline"),h(e.$slide),e.$slide.addClass("fancybox-slide--complete"),g.each(n.slides,function(t,e){e.pos>=n.currPos-1&&e.pos<=n.currPos+1?o[e.pos]=e:e&&(g.fancybox.stop(e.$slide),e.$slide.off().remove())}),n.slides=o),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):n.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n,o=this;o.group.length<2||(n=o.slides[o.currPos+1],(e=o.slides[o.currPos-1])&&e.type===t&&o.loadSlide(e),n&&n.type===t&&o.loadSlide(n))},focus:function(t,e){var n,o,i=this,a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");i.isClosing||((n=(n=!t&&i.current&&i.current.isComplete?i.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):i.$refs.container.find("*:visible")).filter(a).filter(function(){return"hidden"!==g(this).css("visibility")&&!g(this).hasClass("disabled")})).length?(o=n.index(d.activeElement),t&&t.shiftKey?(o<0||0==o)&&(t.preventDefault(),n.eq(n.length-1).trigger("focus")):(o<0||o==n.length-1)&&(t&&t.preventDefault(),n.eq(0).trigger("focus"))):i.$refs.container.trigger("focus"))},activate:function(){var e=this;g(".fancybox-container").each(function(){var t=g(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function n(){u.cleanUp(t)}var o,i,a,r,s,l,c,u=this,d=u.current;return!u.isClosing&&(!(u.isClosing=!0)===u.trigger("beforeClose",t)?(u.isClosing=!1,f(function(){u.update()}),!1):(u.removeEvents(),a=d.$content,o=d.opts.animationEffect,i=g.isNumeric(e)?e:o?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?g.fancybox.stop(d.$slide):o=!1,d.$slide.siblings().trigger("onReset").remove(),i&&u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",i+"ms"),u.hideLoading(d),u.hideControls(!0),u.updateCursor(),"zoom"!==o||a&&i&&"image"===d.type&&!u.isMoved()&&!d.hasError&&(c=u.getThumbPos(d))||(o="fade"),"zoom"===o?(g.fancybox.stop(a),l={top:(r=g.fancybox.getTranslate(a)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(s=d.opts.zoomOpacity)&&(s=.1<Math.abs(d.width/d.height-c.width/c.height)),s&&(c.opacity=0),g.fancybox.setTranslate(a,l),h(a),g.fancybox.animate(a,c,i,n)):o&&i?g.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,i,n):!0===t?setTimeout(n,i):n(),!0))},cleanUp:function(t){var e,n,o,i=this,a=i.current.opts.$orig;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",t),i.current.opts.backFocus&&(a&&a.length&&a.is(":visible")||(a=i.$trigger),a&&a.length&&(n=l.scrollX,o=l.scrollY,a.trigger("focus"),g("html, body").scrollTop(o).scrollLeft(n))),i.current=null,(e=g.fancybox.getInstance())?e.activate():(g("body").removeClass("fancybox-active compensate-for-scrollbar"),g("#fancybox-style-noscroll").remove())},trigger:function(t,e){var n,o=Array.prototype.slice.call(arguments,1),i=this,a=e&&e.opts?e:i.current;if(a?o.unshift(a):a=i,o.unshift(i),g.isFunction(a.opts[t])&&(n=a.opts[t].apply(a,o)),!1===n)return n;"afterClose"!==t&&i.$refs?i.$refs.container.trigger(t+".fb",o):r.trigger(t+".fb",o)},updateControls:function(){var t=this,e=t.current,n=e.index,o=t.$refs.container,i=t.$refs.caption,a=e.opts.caption;e.$slide.trigger("refresh"),a&&a.length?(t.$caption=i).children().eq(0).html(a):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),o.find("[data-fancybox-count]").html(t.group.length),o.find("[data-fancybox-index]").html(n+1),o.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&n<=0),o.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&n>=t.group.length-1),"image"===e.type?o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),g(d.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&1<t.group.length)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&1<t.group.length)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),g.fancybox={version:"3.5.7",defaults:i,getInstance:function(t){var e=g('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return e instanceof v&&("string"===g.type(t)?e[t].apply(e,n):"function"===g.type(t)&&t.apply(e,n),e)},open:function(t,e,n){return new v(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(t=d.createElement("div"),l.getComputedStyle&&l.getComputedStyle(t)&&l.getComputedStyle(t).getPropertyValue("transform")&&!(d.documentMode&&d.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var n="",o={};if(t&&e)return e.left===m&&e.top===m||(n=(e.left===m?t.position().left:e.left)+"px, "+(e.top===m?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),e.scaleX!==m&&e.scaleY!==m?n+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==m&&(n+=" scaleX("+e.scaleX+")"),n.length&&(o.transform=n),e.opacity!==m&&(o.opacity=e.opacity),e.width!==m&&(o.width=e.width),e.height!==m&&(o.height=e.height),t.css(o)},animate:function(e,n,o,i,a){var r,s=this;g.isFunction(o)&&(i=o,o=null),s.stop(e),r=s.getTranslate(e),e.on(u,function(t){t&&t.originalEvent&&(!e.is(t.originalEvent.target)||"z-index"==t.originalEvent.propertyName)||(s.stop(e),g.isNumeric(o)&&e.css("transition-duration",""),g.isPlainObject(n)?n.scaleX!==m&&n.scaleY!==m&&s.setTranslate(e,{top:n.top,left:n.left,width:r.width*n.scaleX,height:r.height*n.scaleY,scaleX:1,scaleY:1}):!0!==a&&e.removeClass(n),g.isFunction(i)&&i(t))}),g.isNumeric(o)&&e.css("transition-duration",o+"ms"),g.isPlainObject(n)?(n.scaleX!==m&&n.scaleY!==m&&(delete n.width,delete n.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),g.fancybox.setTranslate(e,n)):e.addClass(n),e.data("timer",setTimeout(function(){e.trigger(u)},o+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(u),t.off(u).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},g.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?g("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},y),this},r.on("click.fb-start","[data-fancybox]",y),r.on("click.fb-start","[data-fancybox-trigger]",function(t){g('[data-fancybox="'+g(this).attr("data-fancybox-trigger")+'"]').eq(g(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:g(this)})}),e=".fancybox-button",n="fancybox-focus",o=null,r.on("mousedown mouseup focus blur",e,function(t){switch(t.type){case"mousedown":o=g(this);break;case"mouseup":o=null;break;case"focusin":g(e).removeClass(n),g(this).is(o)||g(this).is("[disabled]")||g(this).addClass(n);break;case"focusout":g(e).removeClass(n)}})}function y(t,e){var n,o,i,a=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=p(t.data.options,e)),n=e.$target||g(t.currentTarget).trigger("blur"),(i=g.fancybox.getInstance())&&i.$trigger&&i.$trigger.is(n)||(a=e.selector?g(e.selector):(o=n.attr("data-fancybox")||"")?(a=t.data?t.data.items:[]).length?a.filter('[data-fancybox="'+o+'"]'):g('[data-fancybox="'+o+'"]'):[n],(r=g(a).index(n))<0&&(r=0),(i=g.fancybox.open(a,e,r)).$trigger=n))}}(window,document,jQuery),function(h){"use strict";function p(n,t,e){if(n)return e=e||"","object"===h.type(e)&&(e=h.param(e,!0)),h.each(t,function(t,e){n=n.replace("$"+t,e||"")}),e.length&&(n+=(0<n.indexOf("?")?"&":"?")+e),n}var o={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};h(document).on("objectNeedsType.fb",function(t,e,i){var n,a,r,s,l,c,u,d=i.src||"",f=!1;n=h.extend(!0,{},o,i.opts.media),h.each(n,function(t,e){if(r=d.match(e.matcher)){if(f=e.type,u=t,c={},e.paramPlace&&r[e.paramPlace]){"?"==(l=r[e.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var n=0;n<l.length;++n){var o=l[n].split("=",2);2==o.length&&(c[o[0]]=decodeURIComponent(o[1].replace(/\+/g," ")))}}return s=h.extend(!0,{},e.params,i.opts[t],c),d="function"===h.type(e.url)?e.url.call(this,r,s,i):p(e.url,r,s),a="function"===h.type(e.thumb)?e.thumb.call(this,r,s,i):p(e.thumb,r),"youtube"===t?d=d.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10))}):"vimeo"===t&&(d=d.replace("&%23","#")),!1}}),f?(i.opts.thumb||i.opts.$thumb&&i.opts.$thumb.length||(i.opts.thumb=a),"iframe"===f&&(i.opts=h.extend(!0,i.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),h.extend(i,{type:f,src:d,origSrc:i.src,contentSource:u,contentType:"image"===f?"image":"gmap_place"==u||"gmap_search"==u?"map":"video"})):d&&(i.type=i.opts.defaultType)});var i={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;this[t].loaded?setTimeout(function(){n.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e))},done:function(t){var e,n;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=h.fancybox.getInstance())&&(n=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){e.next()}))}};h(document).on({"afterShow.fb":function(t,e,n){1<e.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(jQuery),function(g,l,m){"use strict";function u(t){var e=[];for(var n in t=(t=t.originalEvent||t||g.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[n].pageX?e.push({x:t[n].pageX,y:t[n].pageY}):t[n].clientX&&e.push({x:t[n].clientX,y:t[n].clientY});return e}function v(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||m.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,n=t[0].attributes,o=n.length;e<o;e++)if("data-fancybox-"===n[e].nodeName.substr(0,14))return 1}function d(t){for(var e,n,o,i,a,r=!1;e=t.get(0),0,n=g.getComputedStyle(e)["overflow-y"],o=g.getComputedStyle(e)["overflow-x"],i=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,a=("scroll"===o||"auto"===o)&&e.scrollWidth>e.clientWidth,!(r=i||a)&&(t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body"););return r}function n(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",m.proxy(e,"ontouchstart"))}var y=g.requestAnimationFrame||g.webkitRequestAnimationFrame||g.mozRequestAnimationFrame||g.oRequestAnimationFrame||function(t){return g.setTimeout(t,1e3/60)},b=g.cancelAnimationFrame||g.webkitCancelAnimationFrame||g.mozCancelAnimationFrame||g.oCancelAnimationFrame||function(t){g.clearTimeout(t)};n.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),m(l).off(".fb.touch"),t.requestId&&(b(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null)},n.prototype.ontouchstart=function(t){var e=this,n=m(t.target),o=e.instance,i=o.current,a=i.$slide,r=i.$content,s="touchstart"==t.type;if(s&&e.$container.off("mousedown.fb.touch"),(!t.originalEvent||2!=t.originalEvent.button)&&a.length&&n.length&&!c(n)&&!c(n.parent())&&(n.is("img")||!(t.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!i||o.isAnimating||i.$slide.hasClass("fancybox-animated"))return t.stopPropagation(),void t.preventDefault();e.realPoints=e.startPoints=u(t),e.startPoints.length&&(i.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=n,e.$content=r,e.opts=i.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=o.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(a[0].clientWidth),e.canvasHeight=Math.round(a[0].clientHeight),e.contentLastPos=null,e.contentStartPos=m.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=m.fancybox.getTranslate(a),e.stagePos=m.fancybox.getTranslate(o.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,m(l).off(".fb.touch").on(s?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",m.proxy(e,"ontouchend")).on(s?"touchmove.fb.touch":"mousemove.fb.touch",m.proxy(e,"ontouchmove")),m.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),((e.opts||e.canPan)&&(n.is(e.$stage)||e.$stage.find(n).length)||(n.is(".fancybox-image")&&t.preventDefault(),m.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(e.isScrollable=d(n)||d(n.parent()),m.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!i.hasError||(e.canPan?(m.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length&&"image"===i.type&&(i.isLoaded||i.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,m.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-m(g).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-m(g).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=v(e.startPoints[0],e.startPoints[1]))))}},n.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(t){var e=this;void 0===t.originalEvent.buttons||0!==t.originalEvent.buttons?e.isScrolling?e.canTap=!1:(e.newPoints=u(t),(e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=v(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=v(e.newPoints[0],e.startPoints[0],"y"),e.distance=v(e.newPoints[0],e.startPoints[0]),0<e.distance&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))):e.ontouchend(t)},n.prototype.onSwipe=function(t){var e,i=this,a=i.instance,n=i.isSwiping,o=i.sliderStartPos.left||0;if(!0!==n)"x"==n&&(0<i.distanceX&&(i.instance.group.length<2||0===i.instance.current.index&&!i.instance.current.opts.loop)?o+=Math.pow(i.distanceX,.8):i.distanceX<0&&(i.instance.group.length<2||i.instance.current.index===i.instance.group.length-1&&!i.instance.current.opts.loop)?o-=Math.pow(-i.distanceX,.8):o+=i.distanceX),i.sliderLastPos={top:"x"==n?0:i.sliderStartPos.top+i.distanceY,left:o},i.requestId&&(b(i.requestId),i.requestId=null),i.requestId=y(function(){i.sliderLastPos&&(m.each(i.instance.slides,function(t,e){var n=e.pos-i.instance.currPos;m.fancybox.setTranslate(e.$slide,{top:i.sliderLastPos.top,left:i.sliderLastPos.left+n*i.canvasWidth+n*e.opts.gutter})}),i.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(i.distance)){if(i.canTap=!1,a.group.length<2&&i.opts.vertical?i.isSwiping="y":a.isDragging||!1===i.opts.vertical||"auto"===i.opts.vertical&&800<m(g).width()?i.isSwiping="x":(e=Math.abs(180*Math.atan2(i.distanceY,i.distanceX)/Math.PI),i.isSwiping=45<e&&e<135?"y":"x"),"y"===i.isSwiping&&m.fancybox.isMobile&&i.isScrollable)return void(i.isScrolling=!0);a.isDragging=i.isSwiping,i.startPoints=i.newPoints,m.each(a.slides,function(t,e){var n,o;m.fancybox.stop(e.$slide),n=m.fancybox.getTranslate(e.$slide),o=m.fancybox.getTranslate(a.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===a.current.pos&&(i.sliderStartPos.top=n.top-o.top,i.sliderStartPos.left=n.left-o.left),m.fancybox.setTranslate(e.$slide,{top:n.top-o.top,left:n.left-o.left})}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop()}},n.prototype.onPan=function(){var t=this;v(t.newPoints[0],t.realPoints[0])<(m.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&b(t.requestId),t.requestId=y(function(){m.fancybox.setTranslate(t.$content,t.contentLastPos)}))},n.prototype.limitMovement=function(){var t,e,n,o,i,a,r=this,s=r.canvasWidth,l=r.canvasHeight,c=r.distanceX,u=r.distanceY,d=r.contentStartPos,f=d.left,h=d.top,p=d.width,g=d.height;return i=s<p?f+c:f,a=h+u,t=Math.max(0,.5*s-.5*p),e=Math.max(0,.5*l-.5*g),n=Math.min(s-p,.5*s-.5*p),o=Math.min(l-g,.5*l-.5*g),0<c&&t<i&&(i=t-1+Math.pow(-t+f+c,.8)||0),c<0&&i<n&&(i=n+1-Math.pow(n-f-c,.8)||0),0<u&&e<a&&(a=e-1+Math.pow(-e+h+u,.8)||0),u<0&&a<o&&(a=o+1-Math.pow(o-h-u,.8)||0),{top:a,left:i}},n.prototype.limitPosition=function(t,e,n,o){var i=this.canvasWidth,a=this.canvasHeight;return t=i<n?(t=0<t?0:t)<i-n?i-n:t:Math.max(0,i/2-n/2),{top:e=a<o?(e=0<e?0:e)<a-o?a-o:e:Math.max(0,a/2-o/2),left:t}},n.prototype.onZoom=function(){var t=this,e=t.contentStartPos,n=e.width,o=e.height,i=e.left,a=e.top,r=v(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,s=Math.floor(n*r),l=Math.floor(o*r),c=(n-s)*t.percentageOfImageAtPinchPointX,u=(o-l)*t.percentageOfImageAtPinchPointY,d=(t.newPoints[0].x+t.newPoints[1].x)/2-m(g).scrollLeft(),f=(t.newPoints[0].y+t.newPoints[1].y)/2-m(g).scrollTop(),h=d-t.centerPointStartX,p={top:a+(u+(f-t.centerPointStartY)),left:i+(c+h),scaleX:r,scaleY:r};t.canTap=!1,t.newWidth=s,t.newHeight=l,t.contentLastPos=p,t.requestId&&b(t.requestId),t.requestId=y(function(){m.fancybox.setTranslate(t.$content,t.contentLastPos)})},n.prototype.ontouchend=function(t){var e=this,n=e.isSwiping,o=e.isPanning,i=e.isZooming,a=e.isScrolling;if(e.endPoints=u(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),m(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(b(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,o?e.endPanning():i?e.endZooming():e.endSwiping(n,a)},n.prototype.endSwiping=function(t,e){var n=this,o=!1,i=n.instance.group.length,a=Math.abs(n.distanceX),r="x"==t&&1<i&&(130<n.dMs&&10<a||50<a);n.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(n.distanceY)?(m.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),o=n.instance.close(!0,250)):r&&0<n.distanceX?o=n.instance.previous(300):r&&n.distanceX<0&&(o=n.instance.next(300)),!1!==o||"x"!=t&&"y"!=t||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var t,e,n,o=this;o.contentLastPos&&(e=!1===o.opts.momentum||350<o.dMs?(t=o.contentLastPos.left,o.contentLastPos.top):(t=o.contentLastPos.left+500*o.velocityX,o.contentLastPos.top+500*o.velocityY),(n=o.limitPosition(t,e,o.contentStartPos.width,o.contentStartPos.height)).width=o.contentStartPos.width,n.height=o.contentStartPos.height,m.fancybox.animate(o.$content,n,366))},n.prototype.endZooming=function(){var t,e,n,o,i=this,a=i.instance.current,r=i.newWidth,s=i.newHeight;i.contentLastPos&&(t=i.contentLastPos.left,o={top:e=i.contentLastPos.top,left:t,width:r,height:s,scaleX:1,scaleY:1},m.fancybox.setTranslate(i.$content,o),r<i.canvasWidth&&s<i.canvasHeight?i.instance.scaleToFit(150):r>a.width||s>a.height?i.instance.scaleToActual(i.centerPointStartX,i.centerPointStartY,150):(n=i.limitPosition(t,e,r,s),m.fancybox.animate(i.$content,n,150)))},n.prototype.onTap=function(n){function t(t){var e=r.opts[t];if(m.isFunction(e)&&(e=e.apply(a,[r,n])),e)switch(e){case"close":a.close(o.startEvent);break;case"toggleControls":a.toggleControls();break;case"next":a.next();break;case"nextOrClose":1<a.group.length?a.next():a.close(o.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(l,c):a.group.length<2&&a.close(o.startEvent))}}var e,o=this,i=m(n.target),a=o.instance,r=a.current,s=n&&u(n)||o.startPoints,l=s[0]?s[0].x-m(g).scrollLeft()-o.stagePos.left:0,c=s[0]?s[0].y-m(g).scrollTop()-o.stagePos.top:0;if((!n.originalEvent||2!=n.originalEvent.button)&&(i.is("img")||!(l>i[0].clientWidth+i.offset().left))){if(i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))e="Outside";else if(i.is(".fancybox-slide"))e="Slide";else{if(!a.current.$content||!a.current.$content.find(i).addBack().filter(i).length)return;e="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,50<Math.abs(l-o.tapX)||50<Math.abs(c-o.tapY))return this;t("dblclick"+e)}else o.tapX=l,o.tapY=c,r.opts["dblclick"+e]&&r.opts["dblclick"+e]!==r.opts["click"+e]?o.tapped=setTimeout(function(){o.tapped=null,a.isAnimating||t("click"+e)},500):t("click"+e);return this}},m(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new n(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(r,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(t){this.instance=t,this.init()}s.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,n=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!n?t.$button.hide():n.progress&&(t.$progress=s('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this,n=e.instance,o=n.current;o&&(!0===t||o.opts.loop||n.currIndex<n.group.length-1)?e.isActive&&"video"!==o.contentType&&(e.$progress&&s.fancybox.animate(e.$progress.show(),{scaleX:1},o.opts.slideShow.speed),e.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},o.opts.slideShow.speed)):(e.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),s(r).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,o){var i=e&&e.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(t,e,n){var o=e&&e.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(t,e,n,o,i){var a=e&&e.SlideShow;!a||!n.opts.slideShow||80!==i&&32!==i||s(r.activeElement).is("button,a,input")||(o.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),s(r).on("visibilitychange",function(){var t=s.fancybox.getInstance(),e=t&&t.SlideShow;e&&e.isActive&&(r.hidden?e.clear():e.set())})}(document,jQuery),function(a,n){"use strict";var o=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},n=0;n<t.length;n++){var o=t[n];if(o&&o[1]in a){for(var i=0;i<o.length;i++)e[t[0][i]]=o[i];return e}}return!1}();if(o){var i={request:function(t){(t=t||a.documentElement)[o.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){a[o.exitFullscreen]()},toggle:function(t){t=t||a.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(a[o.fullscreenElement])},enabled:function(){return Boolean(a[o.fullscreenEnabled])}};n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(a).on(o.fullscreenchange,function(){var t=i.isFullscreen(),e=n.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}n(a).on({"onInit.fb":function(t,e){o?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),i.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&i.request(),e.FullScreen=i):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,o,i){e&&e.FullScreen&&70===i&&(o.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(t,a){"use strict";var r="fancybox-thumbs",s=r+"-active";a.fancybox.defaults=a.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},a.fancybox.defaults);function o(t){this.init(t)}a.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,o=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var i=0,a=n.length;i<a&&(n[i].thumb&&o++,!(1<o));i++);1<o&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var n,t=this,e=t.instance,o=t.opts.parentEl,i=[];t.$grid||(t.$grid=a('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(o).addBack().filter(o)),t.$grid.on("click","a",function(){e.jumpTo(a(this).attr("data-index"))})),t.$list||(t.$list=a('<div class="'+r+'__list">').appendTo(t.$grid)),a.each(e.group,function(t,e){(n=e.thumb)||"image"!==e.type||(n=e.src),i.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=i.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,o=this,i=o.$list,a=o.$grid;o.instance.current&&(n=(e=i.children().removeClass(s).filter('[data-index="'+o.instance.current.index+'"]').addClass(s)).position(),"y"===o.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===o.opts.axis&&(n.left<a.scrollLeft()||n.left>a.scrollLeft()+(a.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t))},update:function(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),a(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new o(e)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(t,e,n,o){var i=e&&e.Thumbs;i&&i.isVisible&&i.focus(o?0:250)},"afterKeydown.fb":function(t,e,n,o,i){var a=e&&e.Thumbs;a&&a.isActive&&71===i&&(o.preventDefault(),a.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(t,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),a(t).on("click","[data-fancybox-share]",function(){var t,e,n,o=a.fancybox.getInstance(),i=o.current||null;i&&("function"===a.type(i.opts.share.url)&&(t=i.opts.share.url.apply(i,[o,i])),e=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return n[t]}))).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),a.fancybox.open({src:o.translate(o,e),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){o.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(a,r,i){"use strict";function s(){var t=a.location.hash.substr(1),e=t.split("-"),n=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:n<1?1:n,gallery:e.join("-")}}function e(t){""!==t.gallery&&i("[data-fancybox='"+i.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function l(t){var e,n;return!!t&&(""!==(n=(e=t.current?t.current.opts:t.opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&n)}i.escapeSelector||(i.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(r).on({"onInit.fb":function(t,e){var n,o;!1!==e.group[e.currIndex].opts.hash&&(n=s(),(o=l(e))&&n.gallery&&o==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(t,e,n,o){var i;n&&!1!==n.opts.hash&&(i=l(e))&&(e.currentHash=i+(1<e.group.length?"-"+(n.index+1):""),a.location.hash!=="#"+e.currentHash&&(o&&!e.origHash&&(e.origHash=a.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in a.history?(a.history[o?"pushState":"replaceState"]({},r.title,a.location.pathname+a.location.search+"#"+e.currentHash),o&&(e.hasCreatedHistory=!0)):a.location.hash=e.currentHash,e.hashTimer=null},300)))},"beforeClose.fb":function(t,e,n){n&&!1!==n.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?a.history.back():e.currentHash&&("replaceState"in a.history?a.history.replaceState({},r.title,a.location.pathname+a.location.search+(e.origHash||"")):a.location.hash=e.origHash),e.currentHash=null)}}),i(a).on("hashchange.fb",function(){var t=s(),o=null;i.each(i(".fancybox-container").get().reverse(),function(t,e){var n=i(e).data("FancyBox");if(n&&n.currentHash)return o=n,!1}),o?o.currentHash===t.gallery+"-"+t.index||1===t.index&&o.currentHash==t.gallery||(o.currentHash=null,o.close()):""!==t.gallery&&e(t)}),setTimeout(function(){i.fancybox.getInstance()||e(s())},50))})}(window,document,jQuery),function(t,e){"use strict";var i=(new Date).getTime();e(t).on({"onInit.fb":function(t,o,e){o.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=o.current,n=(new Date).getTime();o.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,n-i<250||(i=n,o[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
